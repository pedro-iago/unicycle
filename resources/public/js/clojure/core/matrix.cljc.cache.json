["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$*matrix-implementation*","~$clojure.core.matrix.implementations","~$def-mat-mop","~$clojure.core.matrix","~$def-mat-mops","^8","~$TODO","~$clojure.core.matrix.macros","~$error","^;"],"~:excludes",["~#set",["~$array","~$array?","~$clone"]],"~:name","^8","~:imports",null,"~:requires",["^ ","~$clojure.core.matrix.impl.mathsops","^E","~$mp","~$clojure.core.matrix.protocols","~$clojure.core.matrix.impl.wrappers","^H","~$u","~$clojure.core.matrix.utils","~$wrap","^H","~$clojure.core.matrix.impl.sequence","^K","^6","^6","~$default","~$clojure.core.matrix.impl.defaults","^M","^M","^I","^I","~$mops","^E","~$imp","^6","^G","^G","~$clojure.core.matrix.impl.persistent-vector","^P"],"~:uses",["^ ","^5","^6"],"~:defs",["^ ","~$sparse",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","~:line",332,"~:column",7,"~:end-line",332,"~:end-column",13,"~:arglists",["~#list",["~$quote",["^10",[["~$data"],["~$implementation","^12"]]]]],"~:doc","Coerces an array to a sparse format if possible. Sparse arrays are expected to\n   minimise space usage for zero elements.\n\n   Returns the array unchanged if such coercion is not possible, or if the array is already sparse.","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",2,"~:method-params",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"~:arglists-meta",["^10",[null,null]]]],"^B","~$clojure.core.matrix/sparse","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^12"],["^13","^12"]]],"~:protocol-impl",null,"^19",["^10",[null,null]],"^X",1,"^W",332,"^Y",332,"^17",2,"~:fn-var",true,"^[",["^10",[["^12"],["^13","^12"]]],"^14","Coerces an array to a sparse format if possible. Sparse arrays are expected to\n   minimise space usage for zero elements.\n\n   Returns the array unchanged if such coercion is not possible, or if the array is already sparse."],"~$sqrt!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sqrt function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/sqrt!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sqrt function on all elements of an array, using double precision values. Mutates the array in-place."],"~$mset",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",774,"^X",7,"^Y",774,"^Z",11,"^[",["^10",["^11",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"],["~$m","~$x","~$y","~$z","~$&","~$more"]]]]],"^14","Sets a scalar value in an array at the specified position. Supports any number of dimensions.\n\n   Returns a new matrix and leaves the original unchanged.\n\n   WARNING: performance of this operation may be as high as O(N) where N is the number of elements in\n   the array. Consider using mutable arrays and `mset!` when setting large numbers of individual elements\n   is required.","^15",["^ ","^16",true,"^17",4,"^18",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"]]],"^[",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"],["~$m","~$x","~$y","~$z","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]]],"^B","~$clojure.core.matrix/mset","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^15",["^ ","^16",true,"^17",4,"^18",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"]]],"^[",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"],["~$m","~$x","~$y","~$z","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]],"^18",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"]]],"^1;",null,"^19",["^10",[null,null,null,null]],"^X",1,"^W",774,"^Y",774,"^17",4,"^1<",true,"^[",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"],["~$m","~$x","~$y","~$z","~$&","^1@"]]],"^14","Sets a scalar value in an array at the specified position. Supports any number of dimensions.\n\n   Returns a new matrix and leaves the original unchanged.\n\n   WARNING: performance of this operation may be as high as O(N) where N is the number of elements in\n   the array. Consider using mutable arrays and `mset!` when setting large numbers of individual elements\n   is required."],"~$relu!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1934,"^X",7,"^Y",1934,"^Z",12,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the ReLU (rectified linear) function for every element of an array. Mutates the array."],"^B","~$clojure.core.matrix/relu!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1934,"^Y",1934,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the ReLU (rectified linear) function for every element of an array. Mutates the array."],"~$dot",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1742,"^X",7,"^Y",1742,"^Z",10,"^[",["^10",["^11",["^10",[["~$a","~$b"]]]]],"^14","Efficiently computes the scalar dot product (1Dx1D inner product) of two numerical vectors. Prefer this API\n   function if you are performing a dot product on 1D vectors and want a scalar result.\n\n   If either argument is not a vector, will compute a higher dimensional inner product."],"^B","~$clojure.core.matrix/dot","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",10,"^18",["^10",[["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1742,"^Y",1742,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$a","~$b"]]]]],"^14","Efficiently computes the scalar dot product (1Dx1D inner product) of two numerical vectors. Prefer this API\n   function if you are performing a dot product on 1D vectors and want a scalar result.\n\n   If either argument is not a vector, will compute a higher dimensional inner product."],"~$ne",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1345,"^X",7,"^Y",1345,"^Z",9,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Element-wise not-equal comparison operation. Returns a binary array where\n  elements not-equal to the argument are represented by 1 and elements equal to\n  the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (ne 1 1) ;=> 0\n  (ne 5 1) ;=> 1\n  (ne [[1 5] [3 6]] 3) ;=> [[1 1] [0 1]]\n  (ne [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 1] [1 0]]"],"^B","~$clojure.core.matrix/ne","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",9,"^18",["^10",[["~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1345,"^Y",1345,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Element-wise not-equal comparison operation. Returns a binary array where\n  elements not-equal to the argument are represented by 1 and elements equal to\n  the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (ne 1 1) ;=> 0\n  (ne 5 1) ;=> 1\n  (ne [[1 5] [3 6]] 3) ;=> [[1 1] [0 1]]\n  (ne [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 1] [1 0]]"],"~$index-seq",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2134,"^X",7,"^Y",2134,"^Z",16,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns a sequence of all possible index vectors into a matrix, in row-major order"],"^B","~$clojure.core.matrix/index-seq","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2134,"^Y",2134,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns a sequence of all possible index vectors into a matrix, in row-major order"],"~$dense",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",343,"^X",7,"^Y",343,"^Z",12,"^[",["^10",["^11",["^10",[["^12"],["^13","^12"]]]]],"^14","Coerces an array to a dense format if possible. Dense arrays are expected to\n   allocate contiguous storage space for all elements. Either row-major or column-major\n   storage may be alloacted, depending on the implementation.\n\n   'dense' should not be used with very large arrays, and may throw an OutOfMemoryError\n    if the dense array is too large to fit in available memory.\n\n   Returns the array unchanged if such coercion is not possible, or if the array is already dense.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/dense","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^12"],["^13","^12"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",343,"^Y",343,"^17",2,"^1<",true,"^[",["^10",[["^12"],["^13","^12"]]],"^14","Coerces an array to a dense format if possible. Dense arrays are expected to\n   allocate contiguous storage space for all elements. Either row-major or column-major\n   storage may be alloacted, depending on the implementation.\n\n   'dense' should not be used with very large arrays, and may throw an OutOfMemoryError\n    if the dense array is too large to fit in available memory.\n\n   Returns the array unchanged if such coercion is not possible, or if the array is already dense."],"~$index-seq-for-shape",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2129,"^X",7,"^Y",2129,"^Z",26,"^[",["^10",["^11",["^10",[["~$sh"]]]]],"^14","Returns a sequence of all possible index vectors for a given shape, in row-major order"],"^B","~$clojure.core.matrix/index-seq-for-shape","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",26,"^18",["^10",[["^1M"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2129,"^Y",2129,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["^1M"]]]]],"^14","Returns a sequence of all possible index vectors for a given shape, in row-major order"],"~$negate!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1828,"^X",7,"^Y",1828,"^Z",14,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the negation of a numerical array in place. Generally equivalent to (scale! m -1.0)"],"^B","~$clojure.core.matrix/negate!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1828,"^Y",1828,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the negation of a numerical array in place. Generally equivalent to (scale! m -1.0)"],"~$numerical?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",692,"^X",7,"^Y",692,"^Z",17,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the matrix is a valid numerical matrix (i.e. supports numerical core.matrix operations)."],"^B","~$clojure.core.matrix/numerical?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",692,"^Y",692,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the matrix is a valid numerical matrix (i.e. supports numerical core.matrix operations)."],"~$column-matrix?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",603,"^X",7,"^Y",603,"^Z",21,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if a matrix is a column-matrix (i.e. is 2D and has has exactly one column)"],"^B","~$clojure.core.matrix/column-matrix?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",21,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",603,"^Y",603,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if a matrix is a column-matrix (i.e. is 2D and has has exactly one column)"],"~$distance",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1800,"^X",7,"^Y",1800,"^Z",15,"^[",["^10",["^11",["^10",[["~$a","~$b"]]]]],"^14","Calculates the euclidean distance between two numerical vectors.\n\n   This is equivalent to (norm 2 (sub a b)) but may be optimised by the underlying implementation."],"^B","~$clojure.core.matrix/distance","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",15,"^18",["^10",[["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1800,"^Y",1800,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$a","~$b"]]]]],"^14","Calculates the euclidean distance between two numerical vectors.\n\n   This is equivalent to (norm 2 (sub a b)) but may be optimised by the underlying implementation."],"~$mutable",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",255,"^X",7,"^Y",255,"^Z",14,"^[",["^10",["^11",["^10",[["^12"],["^13","^12"]]]]],"^14","Constructs a fully mutable copy of the given array data.\n\n   If the implementation does not support mutable matrices, will return a mutable array\n   from another core.matrix implementation that supports either the same element type or a broader type.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/mutable","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^12"],["^13","^12"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",255,"^Y",255,"^17",2,"^1<",true,"^[",["^10",[["^12"],["^13","^12"]]],"^14","Constructs a fully mutable copy of the given array data.\n\n   If the implementation does not support mutable matrices, will return a mutable array\n   from another core.matrix implementation that supports either the same element type or a broader type."],"~$diagonal?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",508,"^X",7,"^Y",508,"^Z",16,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a diagonal matrix."],"^B","~$clojure.core.matrix/diagonal?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",508,"^Y",508,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a diagonal matrix."],"~$add-inner-product!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1636,"^X",7,"^Y",1636,"^Z",25,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","~$factor"]]]]],"^14","Adds the inner product of two numerical arrays to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (inner-product a b)) but may be optimised by the underlying implementation.","^15",["^ ","^16",false,"^17",4,"^18",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^[",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/add-inner-product!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",25,"^15",["^ ","^16",false,"^17",4,"^18",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^[",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1636,"^Y",1636,"^17",4,"^1<",true,"^[",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^14","Adds the inner product of two numerical arrays to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (inner-product a b)) but may be optimised by the underlying implementation."],"~$identity-matrix?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",492,"^X",7,"^Y",492,"^Z",23,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is an identity-matrix, i.e. a symmetric square matrix with element values\n   of 1 on the leading diagonal and 0 elsewhere."],"^B","~$clojure.core.matrix/identity-matrix?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",23,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",492,"^Y",492,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is an identity-matrix, i.e. a symmetric square matrix with element values\n   of 1 on the leading diagonal and 0 elsewhere."],"~$to-radians",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the to-radians function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/to-radians","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the to-radians function on all elements of an array, using double precision values. Returns a new array."],"~$emap-indexed",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2044,"^X",7,"^Y",2044,"^Z",19,"^[",["^10",["^11",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]]]],"^14","Element-wise map-indexed over all elements of one or more arrays.\n\n   f must accept as first argument the index vector of the current element,\n   and return a result compatible with the element-type of the array m\n\n   Returns a new array of the same element-type and shape as the array m.","^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/emap-indexed","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",19,"^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",2044,"^Y",2044,"^17",3,"^1<",true,"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^14","Element-wise map-indexed over all elements of one or more arrays.\n\n   f must accept as first argument the index vector of the current element,\n   and return a result compatible with the element-type of the array m\n\n   Returns a new array of the same element-type and shape as the array m."],"~$density",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",646,"^X",7,"^Y",646,"^Z",14,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the density of the matrix, defined as the proportion of non-zero elements"],"^B","~$clojure.core.matrix/density","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",646,"^Y",646,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the density of the matrix, defined as the proportion of non-zero elements"],"~$new-scalar-array",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",194,"^X",7,"^Y",194,"^Z",23,"^[",["^10",["^11",["^10",[[],["^13"]]]]],"^14","Returns a new mutable scalar array containing the scalar value zero.","^15",["^ ","^16",false,"^17",1,"^18",["^10",[[],["^13"]]],"^[",["^10",[[],["^13"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/new-scalar-array","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",23,"^15",["^ ","^16",false,"^17",1,"^18",["^10",[[],["^13"]]],"^[",["^10",[[],["^13"]]],"^19",["^10",[null,null]]],"^18",["^10",[[],["^13"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",194,"^Y",194,"^17",1,"^1<",true,"^[",["^10",[[],["^13"]]],"^14","Returns a new mutable scalar array containing the scalar value zero."],"~$lt",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1269,"^X",7,"^Y",1269,"^Z",9,"^[",["^10",["^11",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]]]],"^14","Element-wise less-than comparison operation. Returns a binary array where\n  elements less-than the argument are represented by 1 and elements greater-\n  than or equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (lt 1 4) ;=> 1\n  (lt 3 3) ;=> 0\n  (lt [[1 5] [3 6]] 3) ;=> [[1 0] [0 0]]\n  (lt [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 0] [1 0]]","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","~$a"]]],"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/lt","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",9,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","~$a"]]],"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1269,"^Y",1269,"^17",2,"^1<",true,"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^14","Element-wise less-than comparison operation. Returns a binary array where\n  elements less-than the argument are represented by 1 and elements greater-\n  than or equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (lt 1 4) ;=> 1\n  (lt 3 3) ;=> 0\n  (lt [[1 5] [3 6]] 3) ;=> [[1 0] [0 0]]\n  (lt [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 0] [1 0]]"],"~$emax",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2077,"^X",7,"^Y",2077,"^Z",11,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the maximum element value from a numerical array"],"^B","~$clojure.core.matrix/emax","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2077,"^Y",2077,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the maximum element value from a numerical array"],"~$slice-view",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1000,"^X",7,"^Y",1000,"^Z",17,"^[",["^10",["^11",["^10",[["~$m","~$i"],["~$m","~$dimension","~$i"]]]]],"^14","Gets a view of an array slice. Guaranteed to return a mutable view if the array is mutable.","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","~$i"],["~$m","^2A","~$i"]]],"^[",["^10",[["~$m","~$i"],["~$m","^2A","~$i"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/slice-view","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","~$i"],["~$m","^2A","~$i"]]],"^[",["^10",[["~$m","~$i"],["~$m","^2A","~$i"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","~$i"],["~$m","^2A","~$i"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1000,"^Y",1000,"^17",3,"^1<",true,"^[",["^10",[["~$m","~$i"],["~$m","^2A","~$i"]]],"^14","Gets a view of an array slice. Guaranteed to return a mutable view if the array is mutable."],"~$orthogonal?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",523,"^X",7,"^Y",523,"^Z",18,"^[",["^10",["^11",["^10",[["~$m","~$eps"],["~$m"]]]]],"^14","Returns true if the parameter is an orthogonal matrix.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m","^2D"],["~$m"]]],"^[",["^10",[["~$m","^2D"],["~$m"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/orthogonal?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m","^2D"],["~$m"]]],"^[",["^10",[["~$m","^2D"],["~$m"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","^2D"],["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",523,"^Y",523,"^17",2,"^1<",true,"^[",["^10",[["~$m","^2D"],["~$m"]]],"^14","Returns true if the parameter is an orthogonal matrix."],"~$le",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1288,"^X",7,"^Y",1288,"^Z",9,"^[",["^10",["^11",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]]]],"^14","Element-wise less-than-or-equal-to comparison operation. Returns a binary\n  array where elements less-than or equal to the argument are represented by 1\n  and elements greater-than to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (le 3 3) ;=> 1\n  (le 4 3) ;=> 0\n  (le [[1 5] [3 6]] 3) ;=> [[1 0] [1 0]]\n  (le [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 0] [1 1]]","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","~$a"]]],"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/le","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",9,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","~$a"]]],"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1288,"^Y",1288,"^17",2,"^1<",true,"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^14","Element-wise less-than-or-equal-to comparison operation. Returns a binary\n  array where elements less-than or equal to the argument are represented by 1\n  and elements greater-than to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (le 3 3) ;=> 1\n  (le 4 3) ;=> 0\n  (le [[1 5] [3 6]] 3) ;=> [[1 0] [1 0]]\n  (le [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[1 0] [1 1]]"],"~$add",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1539,"^X",7,"^Y",1539,"^Z",10,"^[",["^10",["^11",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Performs element-wise addition on one or more numerical arrays.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]]],"^B","~$clojure.core.matrix/add","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",10,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]],"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null,null]],"^X",1,"^W",1539,"^Y",1539,"^17",2,"^1<",true,"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Performs element-wise addition on one or more numerical arrays."],"~$negate",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1823,"^X",7,"^Y",1823,"^Z",13,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the negation of a numerical array. Generally equivalent to (scale m -1.0)"],"^B","~$clojure.core.matrix/negate","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1823,"^Y",1823,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the negation of a numerical array. Generally equivalent to (scale m -1.0)"],"~$asin!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the asin function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/asin!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the asin function on all elements of an array, using double precision values. Mutates the array in-place."],"~$get-column",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",828,"^X",7,"^Y",828,"^Z",17,"^[",["^10",["^11",["^10",[["~$m","~$y"]]]]],"^14","Gets a column of a matrix, as a 1D vector.\n\n   The format of the returned 1D vector is determined by the implementation of the source matrix. \n   get-column may return a lightweight mutable view if supported by the implementation."],"^B","~$clojure.core.matrix/get-column","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^18",["^10",[["~$m","~$y"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",828,"^Y",828,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$y"]]]]],"^14","Gets a column of a matrix, as a 1D vector.\n\n   The format of the returned 1D vector is determined by the implementation of the source matrix. \n   get-column may return a lightweight mutable view if supported by the implementation."],"~$cos!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cos function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/cos!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cos function on all elements of an array, using double precision values. Mutates the array in-place."],"~$e=",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1374,"^X",7,"^Y",1374,"^Z",9,"^[",["^10",["^11",["^10",[["~$m1"],["^2S","~$m2"],["^2S","^2T","~$&","^1@"]]]]],"^14","Returns true if all corresponding array elements are equal (using the semantics of clojure.core/=).\n\n   WARNING: a java.lang.Long does not equal a java.lang.Double.\n   Use 'equals' or 'e==' instead if you want to test for numerical equality.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["^2S"],["^2S","^2T"]]],"^[",["^10",[["^2S"],["^2S","^2T"],["^2S","^2T","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/e=","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",9,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["^2S"],["^2S","^2T"]]],"^[",["^10",[["^2S"],["^2S","^2T"],["^2S","^2T","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["^2S"],["^2S","^2T"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",1374,"^Y",1374,"^17",2,"^1<",true,"^[",["^10",[["^2S"],["^2S","^2T"],["^2S","^2T","~$&","^1@"]]],"^14","Returns true if all corresponding array elements are equal (using the semantics of clojure.core/=).\n\n   WARNING: a java.lang.Long does not equal a java.lang.Double.\n   Use 'equals' or 'e==' instead if you want to test for numerical equality."],"~$sparse-matrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",319,"^X",7,"^Y",319,"^Z",20,"^[",["^10",["^11",["^10",[["^12"],["^13","^12"]]]]],"^14","Creates a sparse matrix with the given data, using a specified implementation\n  or the current implementation if not specified. Sparse matrices are required to store\n  a M*N matrix with E non-zero elements in approx O(M+N+E) space or less.\n\n  Throws an exception if creation of a sparse matrix is not possible.\n\n  `sparse-matrix` wqorks as a synonym for `sparse-array`.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/sparse-matrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",20,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^12"],["^13","^12"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",319,"^Y",319,"^17",2,"^1<",true,"^[",["^10",[["^12"],["^13","^12"]]],"^14","Creates a sparse matrix with the given data, using a specified implementation\n  or the current implementation if not specified. Sparse matrices are required to store\n  a M*N matrix with E non-zero elements in approx O(M+N+E) space or less.\n\n  Throws an exception if creation of a sparse matrix is not possible.\n\n  `sparse-matrix` wqorks as a synonym for `sparse-array`."],"~$normalise-arg",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",853,"^X",8,"^Y",853,"^Z",21,"~:private",true,"^[",["^10",["^11",["^10",[["~$arg","~$dim-count"]]]]],"^14","Normalises arg to either a number of a sequable list of indexes"],"^2Y",true,"^B","~$clojure.core.matrix/normalise-arg","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",21,"^18",["^10",[["^2Z","^2["]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",853,"^Y",853,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["^2Z","^2["]]]]],"^14","Normalises arg to either a number of a sequable list of indexes"],"~$ceil!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the ceil function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/ceil!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the ceil function on all elements of an array, using double precision values. Mutates the array in-place."],"~$log",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the log function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/log","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the log function on all elements of an array, using double precision values. Returns a new array."],"~$clamp",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2092,"^X",7,"^Y",2092,"^Z",12,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b"]]]]],"^14","Clamps each element in a numerical array between lower and upper bounds\n  specified by a and b, respectively.\n\n  Examples:\n  (clamp [[1 5 1] [4 10 2] [5 6 3]] 2 8) ;=> [[2 5 2] [4 8 2] [5 6 3]]\n  "],"^B","~$clojure.core.matrix/clamp","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^18",["^10",[["~$m","~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2092,"^Y",2092,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b"]]]]],"^14","Clamps each element in a numerical array between lower and upper bounds\n  specified by a and b, respectively.\n\n  Examples:\n  (clamp [[1 5 1] [4 10 2] [5 6 3]] 2 8) ;=> [[2 5 2] [4 8 2] [5 6 3]]\n  "],"~$current-implementation-object",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2181,"^X",7,"^Y",2181,"^Z",36,"^[",["^10",["^11",["^10",[[]]]]],"^14","Gets a canonical object for the currently active matrix implementation. This object\n   can be used to pass as an implementation parameter, or to query implementation internals via core.matrix protocols."],"^B","~$clojure.core.matrix/current-implementation-object","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",36,"^18",["^10",[[]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2181,"^Y",2181,"^17",0,"^1<",true,"^[",["^10",["^11",["^10",[[]]]]],"^14","Gets a canonical object for the currently active matrix implementation. This object\n   can be used to pass as an implementation parameter, or to query implementation internals via core.matrix protocols."],"~$acos",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the acos function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/acos","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the acos function on all elements of an array, using double precision values. Returns a new array."],"~$to-degrees",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the to-degrees function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/to-degrees","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the to-degrees function on all elements of an array, using double precision values. Returns a new array."],"~$pack",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",731,"^X",7,"^Y",731,"^Z",11,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Packs array data in the most efficient format as defined by the implementation. May return the\n   same array if no additional packing is required."],"^B","~$clojure.core.matrix/pack","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",731,"^Y",731,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Packs array data in the most efficient format as defined by the implementation. May return the\n   same array if no additional packing is required."],"~$floor",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the floor function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/floor","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the floor function on all elements of an array, using double precision values. Returns a new array."],"~$as-vector",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1126,"^X",7,"^Y",1126,"^Z",16,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Creates a view of an array as a single flattened vector.\n\n   Returns nil if this is not supported by the implementation. You should use `to-vector` instead to\n   obtain a flattened vector without guaranteeing a view."],"^B","~$clojure.core.matrix/as-vector","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1126,"^Y",1126,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Creates a view of an array as a single flattened vector.\n\n   Returns nil if this is not supported by the implementation. You should use `to-vector` instead to\n   obtain a flattened vector without guaranteeing a view."],"~$cross",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1782,"^X",7,"^Y",1782,"^Z",12,"^[",["^10",["^11",["^10",[["~$a","~$b"]]]]],"^14","Computes the 3D cross-product of two numerical vectors.\n\n   Behavior on other types is undefined."],"^B","~$clojure.core.matrix/cross","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^18",["^10",[["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1782,"^Y",1782,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$a","~$b"]]]]],"^14","Computes the 3D cross-product of two numerical vectors.\n\n   Behavior on other types is undefined."],"~$identity-matrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",227,"^X",7,"^Y",227,"^Z",22,"^[",["^10",["^11",["^10",[["~$dims"],["^13","^3F"]]]]],"^14","Constructs a 2D identity matrix with the given number of rows.\n\n   Identity matrices constructed with this function may not be fully mutable because they may be\n   implemented with a specialised identity matrix type. Use (mutable (identity-matrix ...)) if you\n   need to guarantee a mutable matrix.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^3F"],["^13","^3F"]]],"^[",["^10",[["^3F"],["^13","^3F"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/identity-matrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",22,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^3F"],["^13","^3F"]]],"^[",["^10",[["^3F"],["^13","^3F"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^3F"],["^13","^3F"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",227,"^Y",227,"^17",2,"^1<",true,"^[",["^10",[["^3F"],["^13","^3F"]]],"^14","Constructs a 2D identity matrix with the given number of rows.\n\n   Identity matrices constructed with this function may not be fully mutable because they may be\n   implemented with a specialised identity matrix type. Use (mutable (identity-matrix ...)) if you\n   need to guarantee a mutable matrix."],"~$set-indices",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",925,"^X",7,"^Y",925,"^Z",18,"^[",["^10",["^11",["^10",[["~$a","~$indices","~$values"]]]]],"^14","like select-indices but sets the elements at the specified indices to values.\n   Leaves the original array (a) unchanged and returns a modified array"],"^B","~$clojure.core.matrix/set-indices","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^18",["^10",[["~$a","^3I","^3J"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",925,"^Y",925,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$a","^3I","^3J"]]]]],"^14","like select-indices but sets the elements at the specified indices to values.\n   Leaves the original array (a) unchanged and returns a modified array"],"~$pow!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1873,"^X",7,"^Y",1873,"^Z",11,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Mutable exponent function, see 'pow'"],"^B","~$clojure.core.matrix/pow!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^18",["^10",[["~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1873,"^Y",1873,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Mutable exponent function, see 'pow'"],"~$index?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",661,"^X",7,"^Y",661,"^Z",13,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a valid array index type. An index is a seq-able 1D list\n   of integer values that can be used to index into arrays."],"^B","~$clojure.core.matrix/index?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",661,"^Y",661,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a valid array index type. An index is a seq-able 1D list\n   of integer values that can be used to index into arrays."],"~$tanh",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the tanh function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/tanh","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the tanh function on all elements of an array, using double precision values. Returns a new array."],"~$join",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1048,"^X",7,"^Y",1048,"^Z",11,"^[",["^10",["^11",["^10",[["~$&","~$arrays"]]]]],"^14","Joins arrays together, along the major dimension 0. For 1D vectors, this behaves as simple concatenation.\n   Other dimensions must be compatible. To join arrays along a different dimension, use 'join-along' instead.","^15",["^ ","^16",true,"^17",0,"^18",[["^10",["^3S"]]],"^[",["^10",[["~$&","^3S"]]],"^19",["^10",[null]]]],"^B","~$clojure.core.matrix/join","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^15",["^ ","^16",true,"^17",0,"^18",[["^10",["^3S"]]],"^[",["^10",[["~$&","^3S"]]],"^19",["^10",[null]]],"^18",[["^10",["^3S"]]],"^1;",null,"^19",["^10",[null]],"^X",1,"^W",1048,"^Y",1048,"^17",0,"^1<",true,"^[",["^10",[["~$&","^3S"]]],"^14","Joins arrays together, along the major dimension 0. For 1D vectors, this behaves as simple concatenation.\n   Other dimensions must be compatible. To join arrays along a different dimension, use 'join-along' instead."],"~$add-scaled-product",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1621,"^X",7,"^Y",1621,"^Z",25,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b","^20"]]]]],"^14","Adds the product of two numerical arrays scaled by a given factor to the first array.\n\n   This is equivalent to (add m (mul a b factor)) but may be optimised by the underlying implementation."],"^B","~$clojure.core.matrix/add-scaled-product","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",25,"^18",["^10",[["~$m","~$a","~$b","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1621,"^Y",1621,"^17",4,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b","^20"]]]]],"^14","Adds the product of two numerical arrays scaled by a given factor to the first array.\n\n   This is equivalent to (add m (mul a b factor)) but may be optimised by the underlying implementation."],"~$dimension-count",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",552,"^X",7,"^Y",552,"^Z",22,"^[",["^10",["^11",["^10",[["~$m","~$dim"]]]]],"^14","Returns the size of the specified dimension in a matrix. Will throw an error if the matrix\n   does not have the specified dimension.","~:inline",["^10",["~$fn",["^10",[["~$m","^3X"],["^10",["~$clojure.core/sequence",["^10",["~$clojure.core/seq",["^10",["~$clojure.core/concat",["^10",["~$clojure.core/list",["^10",["^11","~$cljs.core/long"]]]],["^10",["^42",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/dimension-count"]]]],["^10",["^42","~$m"]],["^10",["^42","^3X"]]]]]]]]]]]]]]]]]]]]],"^B","~$clojure.core.matrix/dimension-count","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",22,"^18",["^10",[["~$m","^3X"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",552,"^Y",552,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^3X"]]]]],"^14","Returns the size of the specified dimension in a matrix. Will throw an error if the matrix\n   does not have the specified dimension.","^3Y",["^10",["^3Z",["^10",[["~$m","^3X"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^43"]]]],["^10",["^42",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^44"]]]],["^10",["^42","~$m"]],["^10",["^42","^3X"]]]]]]]]]]]]]]]]]]]]],"~$atan!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the atan function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/atan!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the atan function on all elements of an array, using double precision values. Mutates the array in-place."],"~$set-row",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1973,"^X",7,"^Y",1973,"^Z",14,"^[",["^10",["^11",["^10",[["~$m","~$i","~$row"]]]]],"^14","Sets a row in a matrix using a specified vector."],"^B","~$clojure.core.matrix/set-row","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m","~$i","^49"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1973,"^Y",1973,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$i","^49"]]]]],"^14","Sets a row in a matrix using a specified vector."],"~$sub!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1681,"^X",7,"^Y",1681,"^Z",11,"^[",["^10",["^11",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Performs element-wise mutable subtraction on one or more numerical arrays.\n\n   NOTE: For a single argument, returns the argument unchanged: use negate! instead if you wish to negate a mutable\n   array in place. This is intentional, so that you can do (apply sub! m list-of-arrays) and get the expected\n   result if the list of arrays is empty.\n\n   Returns the first array, after it has been mutated.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/sub!","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",1681,"^Y",1681,"^17",2,"^1<",true,"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Performs element-wise mutable subtraction on one or more numerical arrays.\n\n   NOTE: For a single argument, returns the argument unchanged: use negate! instead if you wish to negate a mutable\n   array in place. This is intentional, so that you can do (apply sub! m list-of-arrays) and get the expected\n   result if the list of arrays is empty.\n\n   Returns the first array, after it has been mutated."],"~$select",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",870,"^X",7,"^Y",870,"^Z",13,"^[",["^10",["^11",["^10",[["~$a","~$&","~$args"]]]]],"^14","Returns an array containing all elements in a which are at the positions\n   of the Cartesian product of args. An argument can be:\n    - a number - slices at this dimension (eliminates the dimension),\n    - a keyword which selects specific slices (:first :last)\n    - a 1-dimensional array of numbers which selects the slices at these indices\n    - a keyword which selects a range of slices (:all :butlast :rest)\n\n   The number of args must match the dimensionality of a.\n\n   Examples:\n   (select [[1 2][3 4]] 0 0) ;=> 1\n   (select [[1 2][3 4]] 0 :all) ;=> [1 2]\n   (select [[1 2][3 4]] [0 1] [0]) ;=> [[1] [3]]\n   (select [[1 2][3 4]] :all 0) ;=> [1 3]","^15",["^ ","^16",true,"^17",1,"^18",[["^10",["~$a","^4>"]]],"^[",["^10",[["~$a","~$&","^4>"]]],"^19",["^10",[null]]]],"^B","~$clojure.core.matrix/select","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^15",["^ ","^16",true,"^17",1,"^18",[["^10",["~$a","^4>"]]],"^[",["^10",[["~$a","~$&","^4>"]]],"^19",["^10",[null]]],"^18",[["^10",["~$a","^4>"]]],"^1;",null,"^19",["^10",[null]],"^X",1,"^W",870,"^Y",870,"^17",1,"^1<",true,"^[",["^10",[["~$a","~$&","^4>"]]],"^14","Returns an array containing all elements in a which are at the positions\n   of the Cartesian product of args. An argument can be:\n    - a number - slices at this dimension (eliminates the dimension),\n    - a keyword which selects specific slices (:first :last)\n    - a 1-dimensional array of numbers which selects the slices at these indices\n    - a keyword which selects a range of slices (:all :butlast :rest)\n\n   The number of args must match the dimensionality of a.\n\n   Examples:\n   (select [[1 2][3 4]] 0 0) ;=> 1\n   (select [[1 2][3 4]] 0 :all) ;=> [1 2]\n   (select [[1 2][3 4]] [0 1] [0]) ;=> [[1] [3]]\n   (select [[1 2][3 4]] :all 0) ;=> [1 3]"],"~$add-scaled!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1615,"^X",7,"^Y",1615,"^Z",18,"^[",["^10",["^11",["^10",[["~$m","~$a","^20"]]]]],"^14","Adds a numerical array scaled by a given factor to the first array. Returns the mutated array."],"^B","~$clojure.core.matrix/add-scaled!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^18",["^10",[["~$m","~$a","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1615,"^Y",1615,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a","^20"]]]]],"^14","Adds a numerical array scaled by a given factor to the first array. Returns the mutated array."],"~$new-matrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",153,"^X",7,"^Y",153,"^Z",17,"^[",["^10",["^11",["^10",[["~$rows","~$columns"],["^13","^4C","^4D"]]]]],"^14","Constructs a new 2D array (matrix) with the given dimensions.\n   The new matrix will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable matrices, then the new matrix will be fully mutable.","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^[",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/new-matrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^[",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",153,"^Y",153,"^17",3,"^1<",true,"^[",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^14","Constructs a new 2D array (matrix) with the given dimensions.\n   The new matrix will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable matrices, then the new matrix will be fully mutable."],"~$shift",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1105,"^X",7,"^Y",1105,"^Z",12,"^[",["^10",["^11",["^10",[["~$m","^2A","~$shift-amount"],["~$m","~$shifts"]]]]],"^14","Shifts all elements of an array along specified dimensions, maintaining the shape of the array.\n\n   New spaces shifted into the array are filled with zero.","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^[",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/shift","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^[",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1105,"^Y",1105,"^17",3,"^1<",true,"^[",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^14","Shifts all elements of an array along specified dimensions, maintaining the shape of the array.\n\n   New spaces shifted into the array are filled with zero."],"~$to-radians!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the to-radians function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/to-radians!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the to-radians function on all elements of an array, using double precision values. Mutates the array in-place."],"~$softplus",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1918,"^X",7,"^Y",1918,"^Z",15,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the softplus function for every element of an array."],"^B","~$clojure.core.matrix/softplus","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",15,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1918,"^Y",1918,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the softplus function for every element of an array."],"~$ceil",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the ceil function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/ceil","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the ceil function on all elements of an array, using double precision values. Returns a new array."],"~$to-vector",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1134,"^X",7,"^Y",1134,"^Z",16,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Creates a new array representing the elements of array m as a single flattened vector.\n\n   This operation guarantees a new copy of the data."],"^B","~$clojure.core.matrix/to-vector","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1134,"^Y",1134,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Creates a new array representing the elements of array m as a single flattened vector.\n\n   This operation guarantees a new copy of the data."],"~$emap!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2102,"^X",7,"^Y",2102,"^Z",12,"^[",["^10",["^11",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]]]],"^14","Element-wise map of a function f over all elements of one or more arrays.\n\n   f must return a result compatible with the element-type of the array m\n\n   Performs in-place modification of the first array argument.","^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/emap!","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",2102,"^Y",2102,"^17",3,"^1<",true,"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^14","Element-wise map of a function f over all elements of one or more arrays.\n\n   f must return a result compatible with the element-type of the array m\n\n   Performs in-place modification of the first array argument."],"~$abs!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the abs function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/abs!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the abs function on all elements of an array, using double precision values. Mutates the array in-place."],"~$labels",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1408,"^X",7,"^Y",1408,"^Z",13,"^[",["^10",["^11",["^10",[["~$m","^3X"]]]]],"^14","Return a vector of labels for a given array dimension. Return nil if the dimension is unlabelled."],"^B","~$clojure.core.matrix/labels","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^18",["^10",[["~$m","^3X"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1408,"^Y",1408,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^3X"]]]]],"^14","Return a vector of labels for a given array dimension. Return nil if the dimension is unlabelled."],"~$zero-count",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",638,"^X",7,"^Y",638,"^Z",17,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the number of zeros in an array.\n\n   Result will usually be a Long, however callers should note that for very large sparse arrays\n   the zero count may be a BigInteger, i.e. equal to or larger than 2^63."],"^B","~$clojure.core.matrix/zero-count","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",638,"^Y",638,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the number of zeros in an array.\n\n   Result will usually be a Long, however callers should note that for very large sparse arrays\n   the zero count may be a BigInteger, i.e. equal to or larger than 2^63."],"~$swap-rows",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1955,"^X",7,"^Y",1955,"^Z",16,"^[",["^10",["^11",["^10",[["~$m","~$i","~$j"]]]]],"^14","Swap row i with row j in a matrix, returning a new matrix"],"^B","~$clojure.core.matrix/swap-rows","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$m","~$i","~$j"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1955,"^Y",1955,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$i","~$j"]]]]],"^14","Swap row i with row j in a matrix, returning a new matrix"],"~$e*",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1459,"^X",7,"^Y",1459,"^Z",9,"^[",["^10",["^11",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","An element-wise multiply operator equivalent to `mul`.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]]],"^B","~$clojure.core.matrix/e*","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",9,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]],"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null,null]],"^X",1,"^W",1459,"^Y",1459,"^17",2,"^1<",true,"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","An element-wise multiply operator equivalent to `mul`."],"~$conjoin",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1063,"^X",7,"^Y",1063,"^Z",14,"^[",["^10",["^11",["^10",[["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Adds a new value [b] as a new slice to an array [a], returning the extended array.\n   Broadcasts the new value to the correct shape of a slice of a if necessary.\n\n   This can be considered as the array equivalent of clojure.core/conj","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a","~$b"]]],"^[",["^10",[["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/conjoin","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a","~$b"]]],"^[",["^10",[["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1063,"^Y",1063,"^17",2,"^1<",true,"^[",["^10",[["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Adds a new value [b] as a new slice to an array [a], returning the extended array.\n   Broadcasts the new value to the correct shape of a slice of a if necessary.\n\n   This can be considered as the array equivalent of clojure.core/conj"],"~$block-diagonal-matrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",247,"^X",7,"^Y",247,"^Z",28,"^[",["^10",["^11",["^10",[["~$blocks"],["^13","^55"]]]]],"^14","Constructs a block diagonal matrix for a given vector of 2D square matrices and arranges\n  the matrices along the main diagonal of the 2D matrix","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^55"],["^13","^55"]]],"^[",["^10",[["^55"],["^13","^55"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/block-diagonal-matrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",28,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^55"],["^13","^55"]]],"^[",["^10",[["^55"],["^13","^55"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^55"],["^13","^55"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",247,"^Y",247,"^17",2,"^1<",true,"^[",["^10",[["^55"],["^13","^55"]]],"^14","Constructs a block diagonal matrix for a given vector of 2D square matrices and arranges\n  the matrices along the main diagonal of the 2D matrix"],"~$multiply-row",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1960,"^X",7,"^Y",1960,"^Z",19,"^[",["^10",["^11",["^10",[["~$m","~$i","^20"]]]]],"^14","Multiply row i in a matrix by a constant factor"],"^B","~$clojure.core.matrix/multiply-row","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",19,"^18",["^10",[["~$m","~$i","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1960,"^Y",1960,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$i","^20"]]]]],"^14","Multiply row i in a matrix by a constant factor"],"~$log!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the log function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/log!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the log function on all elements of an array, using double precision values. Mutates the array in-place."],"~$supports-shape?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",396,"^X",7,"^Y",396,"^Z",22,"^[",["^10",["^11",["^10",[["~$m","~$shape"]]]]],"^14","Returns true if the implementation supports creation of matrices with a specific shape."],"^B","~$clojure.core.matrix/supports-shape?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",22,"^18",["^10",[["~$m","^5<"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",396,"^Y",396,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^5<"]]]]],"^14","Returns true if the implementation supports creation of matrices with a specific shape."],"~$eseq",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2018,"^X",7,"^Y",2018,"^Z",11,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns all elements of an array as a sequence object in row-major order"],"^B","~$clojure.core.matrix/eseq","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2018,"^Y",2018,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns all elements of an array as a sequence object in row-major order"],"~$label-index",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1413,"^X",7,"^Y",1413,"^Z",18,"^[",["^10",["^11",["^10",[["~$m","^3X","~$label"]]]]],"^14","Return the index of a label along a given dimension. Returns nil if the label does not exist."],"^B","~$clojure.core.matrix/label-index","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^18",["^10",[["~$m","^3X","^5A"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1413,"^Y",1413,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^3X","^5A"]]]]],"^14","Return the index of a label along a given dimension. Returns nil if the label does not exist."],"~$new-vector",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",135,"^X",7,"^Y",135,"^Z",17,"^[",["^10",["^11",["^10",[["~$length"],["^13","^5D"]]]]],"^14","Constructs a new vector with the given length.\n   New matrix will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable vectors, then the new vector will be fully mutable.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5D"],["^13","^5D"]]],"^[",["^10",[["^5D"],["^13","^5D"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/new-vector","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5D"],["^13","^5D"]]],"^[",["^10",[["^5D"],["^13","^5D"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^5D"],["^13","^5D"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",135,"^Y",135,"^17",2,"^1<",true,"^[",["^10",[["^5D"],["^13","^5D"]]],"^14","Constructs a new vector with the given length.\n   New matrix will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable vectors, then the new vector will be fully mutable."],"~$transpose!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1180,"^X",7,"^Y",1180,"^Z",17,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Transposes a square 2D matrix in-place.\n\n   Will throw an exception if not possible (e.g. if the matrix is not square or not mutable)."],"^B","~$clojure.core.matrix/transpose!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1180,"^Y",1180,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Transposes a square 2D matrix in-place.\n\n   Will throw an exception if not possible (e.g. if the matrix is not square or not mutable)."],"~$mget",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^Z",11,"^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$m"],["~$m","~$x"],["~$m","~$x","~$y"]]],"^[",["^10",[["~$m"],["~$m","~$x"],["~$m","~$x","~$y"],["~$m","~$x","~$y","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]],"~:inline-arities",["^>",[1,3,2]],"^X",7,"^W",758,"^Y",758,"^[",["^10",["^11",["^10",[["~$m"],["~$m","~$x"],["~$m","~$x","~$y"],["~$m","~$x","~$y","~$&","^1@"]]]]],"^14","Gets a scalar value from an array at the specified position. Supports any number of dimensions.","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/get-0d"]]]],["^10",["^42","~$m"]]]]]]]]]],["^10",[["~$m","~$x"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/get-1d"]]]],["^10",["^42","~$m"]],["^10",["^42","~$x"]]]]]]]]]],["^10",[["~$m","~$x","~$y"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/get-2d"]]]],["^10",["^42","~$m"]],["^10",["^42","~$x"]],["^10",["^42","~$y"]]]]]]]]]]]]],"^B","~$clojure.core.matrix/mget","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$m"],["~$m","~$x"],["~$m","~$x","~$y"]]],"^[",["^10",[["~$m"],["~$m","~$x"],["~$m","~$x","~$y"],["~$m","~$x","~$y","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]],"^18",["^10",[["~$m"],["~$m","~$x"],["~$m","~$x","~$y"]]],"^5I",["^>",[1,3,2]],"^1;",null,"^19",["^10",[null,null,null,null]],"^X",1,"^W",758,"^Y",758,"^17",3,"^1<",true,"^[",["^10",[["~$m"],["~$m","~$x"],["~$m","~$x","~$y"],["~$m","~$x","~$y","~$&","^1@"]]],"^14","Gets a scalar value from an array at the specified position. Supports any number of dimensions.","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^5J"]]]],["^10",["^42","~$m"]]]]]]]]]],["^10",[["~$m","~$x"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^5K"]]]],["^10",["^42","~$m"]],["^10",["^42","~$x"]]]]]]]]]],["^10",[["~$m","~$x","~$y"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^5L"]]]],["^10",["^42","~$m"]],["^10",["^42","~$x"]],["^10",["^42","~$y"]]]]]]]]]]]]],"~$atan",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the atan function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/atan","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the atan function on all elements of an array, using double precision values. Returns a new array."],"~$cosh!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cosh function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/cosh!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cosh function on all elements of an array, using double precision values. Mutates the array in-place."],"~$ge",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1326,"^X",7,"^Y",1326,"^Z",9,"^[",["^10",["^11",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]]]],"^14","Element-wise greater-than-or-equal-to comparison operation. Returns a binary\n  array where elements greater-than or equal to the argument are represented by 1\n  and elements less-than to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (ge 2 3) ;=> 0\n  (ge 3 3) ;=> 1\n  (ge [[1 5] [3 6]] 3) ;=> [[0 1] [1 1]]\n  (ge [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 1] [0 1]]","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","~$a"]]],"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/ge","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",9,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","~$a"]]],"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1326,"^Y",1326,"^17",2,"^1<",true,"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^14","Element-wise greater-than-or-equal-to comparison operation. Returns a binary\n  array where elements greater-than or equal to the argument are represented by 1\n  and elements less-than to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (ge 2 3) ;=> 0\n  (ge 3 3) ;=> 1\n  (ge [[1 5] [3 6]] 3) ;=> [[0 1] [1 1]]\n  (ge [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 1] [0 1]]"],"~$ensure-mutable",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",281,"^X",7,"^Y",281,"^Z",21,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Checks if an array is mutable, and if not converts to a new mutable array. Guarantees\n   that the result will be mutable, but may not be the same type as the original array."],"^B","~$clojure.core.matrix/ensure-mutable","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",21,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",281,"^Y",281,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Checks if an array is mutable, and if not converts to a new mutable array. Guarantees\n   that the result will be mutable, but may not be the same type as the original array."],"~$slice-views",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",986,"^X",7,"^Y",986,"^Z",18,"^[",["^10",["^11",["^10",[["~$m"],["~$m","^2A"]]]]],"^14","Gets a sequence of views of the slices of an array. If dimension is supplied, slices along a given dimension,\n   otherwise slices along the first dimension. If the matrix implementation supports mutable views, these views\n   can be used to mutate portions of the original array.\n\n   A key difference between 'slices' and 'slice-views' is that 'slice-views' must always return views. In order\n   to ensure this behaviour on mutable 1-dimensioanal arrays, it must return a sequence of 0-dimensioanal arrays.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","^2A"]]],"^[",["^10",[["~$m"],["~$m","^2A"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/slice-views","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","^2A"]]],"^[",["^10",[["~$m"],["~$m","^2A"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m"],["~$m","^2A"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",986,"^Y",986,"^17",2,"^1<",true,"^[",["^10",[["~$m"],["~$m","^2A"]]],"^14","Gets a sequence of views of the slices of an array. If dimension is supplied, slices along a given dimension,\n   otherwise slices along the first dimension. If the matrix implementation supports mutable views, these views\n   can be used to mutate portions of the original array.\n\n   A key difference between 'slices' and 'slice-views' is that 'slice-views' must always return views. In order\n   to ensure this behaviour on mutable 1-dimensioanal arrays, it must return a sequence of 0-dimensioanal arrays."],"~$diagonal-matrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",287,"^X",7,"^Y",287,"^Z",22,"^[",["^10",["^11",["^10",[["~$diagonal-values"],["^13","^5Y"]]]]],"^14","Constructs a 2D diagonal matrix with the given numerical values on the main diagonal.\n   All off-diagonal elements will be zero, and diagonal-values may be a vector or any\n  Clojure sequence of values.\n\n   Diagonal matrices constructed this way may use specialised storage formats, hence may not be fully mutable.\n   Use (mutable (diagonal-matrix ...)) if you need to guarantee a mutable matrix.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5Y"],["^13","^5Y"]]],"^[",["^10",[["^5Y"],["^13","^5Y"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/diagonal-matrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",22,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5Y"],["^13","^5Y"]]],"^[",["^10",[["^5Y"],["^13","^5Y"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^5Y"],["^13","^5Y"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",287,"^Y",287,"^17",2,"^1<",true,"^[",["^10",[["^5Y"],["^13","^5Y"]]],"^14","Constructs a 2D diagonal matrix with the given numerical values on the main diagonal.\n   All off-diagonal elements will be zero, and diagonal-values may be a vector or any\n  Clojure sequence of values.\n\n   Diagonal matrices constructed this way may use specialised storage formats, hence may not be fully mutable.\n   Use (mutable (diagonal-matrix ...)) if you need to guarantee a mutable matrix."],"~$set-inner-product!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1658,"^X",7,"^Y",1658,"^Z",25,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]]]],"^14","Sets an array equal to the inner product of two numerical arrays.\n   Returns the mutated first array.\n   This is equivalent to (assign! m (inner-product a b)) but may be optimised by the underlying implementation.","^15",["^ ","^16",false,"^17",4,"^18",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^[",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/set-inner-product!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",25,"^15",["^ ","^16",false,"^17",4,"^18",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^[",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1658,"^Y",1658,"^17",4,"^1<",true,"^[",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^14","Sets an array equal to the inner product of two numerical arrays.\n   Returns the mutated first array.\n   This is equivalent to (assign! m (inner-product a b)) but may be optimised by the underlying implementation."],"~$sin!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sin function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/sin!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sin function on all elements of an array, using double precision values. Mutates the array in-place."],"~$mutable?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",653,"^X",7,"^Y",653,"^Z",15,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the matrix is mutable, i.e. supports setting of values.\n\n   It is possible for some matrix implementations to have constraints on mutability (e.g. mutable only in diagonal elements),\n   this method will still return true for such cases."],"^B","~$clojure.core.matrix/mutable?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",15,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",653,"^Y",653,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the matrix is mutable, i.e. supports setting of values.\n\n   It is possible for some matrix implementations to have constraints on mutability (e.g. mutable only in diagonal elements),\n   this method will still return true for such cases."],"~$normalise!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1735,"^X",7,"^Y",1735,"^Z",17,"^[",["^10",["^11",["^10",[["~$v"]]]]],"^14","Like 'normalise', but mutates a numerical vector in-place (scales to unit length).\n   Returns the modified vector."],"^B","~$clojure.core.matrix/normalise!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^18",["^10",[["~$v"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1735,"^Y",1735,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$v"]]]]],"^14","Like 'normalise', but mutates a numerical vector in-place (scales to unit length).\n   Returns the modified vector."],"~$scalar-array",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",202,"^X",7,"^Y",202,"^Z",19,"^[",["^10",["^11",["^10",[["~$value"],["^13","^68"]]]]],"^14","Creates a new zero-dimensional array containing the specified scalar value.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^68"],["^13","^68"]]],"^[",["^10",[["^68"],["^13","^68"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/scalar-array","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",19,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^68"],["^13","^68"]]],"^[",["^10",[["^68"],["^13","^68"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^68"],["^13","^68"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",202,"^Y",202,"^17",2,"^1<",true,"^[",["^10",[["^68"],["^13","^68"]]],"^14","Creates a new zero-dimensional array containing the specified scalar value."],"~$supports-dimensionality?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",389,"^X",7,"^Y",389,"^Z",31,"^[",["^10",["^11",["^10",[["~$m","^3W"]]]]],"^14","Returns true if the implementation for a given matrix supports a specific dimensionality, i.e.\n   can natively create and manipulate matrices with the given number of dimensions"],"^B","~$clojure.core.matrix/supports-dimensionality?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",31,"^18",["^10",[["~$m","^3W"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",389,"^Y",389,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^3W"]]]]],"^14","Returns true if the implementation for a given matrix supports a specific dimensionality, i.e.\n   can natively create and manipulate matrices with the given number of dimensions"],"~$transform",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1520,"^X",7,"^Y",1520,"^Z",16,"^[",["^10",["^11",["^10",[["~$t","~$v"]]]]],"^14","Transforms a given vector with a transformation, returning a new vector.\n\n   The transformation may be a 2D matrix, but other types of transformation may also be supported\n   e.g. affine transformations, unary operators."],"^B","~$clojure.core.matrix/transform","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$t","~$v"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1520,"^Y",1520,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$t","~$v"]]]]],"^14","Transforms a given vector with a transformation, returning a new vector.\n\n   The transformation may be a 2D matrix, but other types of transformation may also be supported\n   e.g. affine transformations, unary operators."],"~$softmax",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1940,"^X",7,"^Y",1940,"^Z",14,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the softmax function for a numerical vector."],"^B","~$clojure.core.matrix/softmax","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1940,"^Y",1940,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the softmax function for a numerical vector."],"~$set-selection",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",917,"^X",7,"^Y",917,"^Z",20,"^[",["^10",["^11",["^10",[["~$a","~$&","^4>"]]]]],"^14","Like select but sets the elements in the selection to the value of the final argument.\n   Leaves a unchanged and returns the modified array","^15",["^ ","^16",true,"^17",1,"^18",[["^10",["~$a","^4>"]]],"^[",["^10",[["~$a","~$&","^4>"]]],"^19",["^10",[null]]]],"^B","~$clojure.core.matrix/set-selection","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",20,"^15",["^ ","^16",true,"^17",1,"^18",[["^10",["~$a","^4>"]]],"^[",["^10",[["~$a","~$&","^4>"]]],"^19",["^10",[null]]],"^18",[["^10",["~$a","^4>"]]],"^1;",null,"^19",["^10",[null]],"^X",1,"^W",917,"^Y",917,"^17",1,"^1<",true,"^[",["^10",[["~$a","~$&","^4>"]]],"^14","Like select but sets the elements in the selection to the value of the final argument.\n   Leaves a unchanged and returns the modified array"],"~$column-count",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",565,"^X",7,"^Y",565,"^Z",19,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the number of columns in a matrix (array must be 2D or more)","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^45"]]]],["^10",["^42","~$m"]],["^10",["^42",1]]]]]]]]]]]]],"^B","~$clojure.core.matrix/column-count","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",19,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",565,"^Y",565,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the number of columns in a matrix (array must be 2D or more)","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^45"]]]],["^10",["^42","~$m"]],["^10",["^42",1]]]]]]]]]]]]],"~$logistic",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1907,"^X",7,"^Y",1907,"^Z",15,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the sigmoid (logistic) function for every element of an array."],"^B","~$clojure.core.matrix/logistic","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",15,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1907,"^Y",1907,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the sigmoid (logistic) function for every element of an array."],"~$mmul",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1446,"^X",7,"^Y",1446,"^Z",11,"^[",["^10",["^11",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Performs matrix multiplication on matrices or vectors. Equivalent to\n  inner-product when applied to vectors.  Will treat a 1D vector roughly as a\n  1xN matrix (row vector) when it's the first argument, or as an Nx1 matrix\n  (column vector) when it's the second argument--except that the dimensionality\n  of the result will be different from what it would be with matrix arguments.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]]],"^B","~$clojure.core.matrix/mmul","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]],"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null,null]],"^X",1,"^W",1446,"^Y",1446,"^17",2,"^1<",true,"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Performs matrix multiplication on matrices or vectors. Equivalent to\n  inner-product when applied to vectors.  Will treat a 1D vector roughly as a\n  1xN matrix (row vector) when it's the first argument, or as an Nx1 matrix\n  (column vector) when it's the second argument--except that the dimensionality\n  of the result will be different from what it would be with matrix arguments."],"~$cos",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cos function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/cos","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cos function on all elements of an array, using double precision values. Returns a new array."],"~$non-zero-indices",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2006,"^X",7,"^Y",2006,"^Z",23,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the non-zero indices of an array.\n   - For a 1D vector, returns an ordered index list.\n   - For a higher dimensional array, returns the non-zero-indices for each slice in row-major order."],"^B","~$clojure.core.matrix/non-zero-indices","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",23,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2006,"^Y",2006,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the non-zero indices of an array.\n   - For a 1D vector, returns an ordered index list.\n   - For a higher dimensional array, returns the non-zero-indices for each slice in row-major order."],"~$log10",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the log10 function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/log10","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the log10 function on all elements of an array, using double precision values. Returns a new array."],"~$tan",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the tan function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/tan","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the tan function on all elements of an array, using double precision values. Returns a new array."],"~$cbrt",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cbrt function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/cbrt","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cbrt function on all elements of an array, using double precision values. Returns a new array."],"~$eq",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1360,"^X",7,"^Y",1360,"^Z",9,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Element-wise equal comparison operation. Returns a binary\narray where elements equal to the argument are represented by 1 and\nelements not-equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (eq 1 1) ;=> 1\n  (eq 5 1) ;=> 0\n  (eq [[1 5] [3 6]] 3) ;=> [[0 0] [1 0]]\n  (eq [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 0] [0 1]]"],"^B","~$clojure.core.matrix/eq","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",9,"^18",["^10",[["~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1360,"^Y",1360,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Element-wise equal comparison operation. Returns a binary\narray where elements equal to the argument are represented by 1 and\nelements not-equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (eq 1 1) ;=> 1\n  (eq 5 1) ;=> 0\n  (eq [[1 5] [3 6]] 3) ;=> [[0 0] [1 0]]\n  (eq [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 0] [0 1]]"],"~$index",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",102,"^X",7,"^Y",102,"^Z",12,"^[",["^10",["^11",["^10",[["^12"],["^13","^12"]]]]],"^14","Constructs a new 1-dimensional integer index from given data.\n\n   The data may be in one of the following forms:\n   - A valid existing index\n   - A 1D array of integer values\n   - A sequence of integer values\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation* to produce the index object.\n\n   If the implementation does not support its own native index types, will return a\n   valid index from a default implementation.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/index","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^12"],["^13","^12"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",102,"^Y",102,"^17",2,"^1<",true,"^[",["^10",[["^12"],["^13","^12"]]],"^14","Constructs a new 1-dimensional integer index from given data.\n\n   The data may be in one of the following forms:\n   - A valid existing index\n   - A 1D array of integer values\n   - A sequence of integer values\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation* to produce the index object.\n\n   If the implementation does not support its own native index types, will return a\n   valid index from a default implementation."],"~$emul!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1506,"^X",27,"^Y",1506,"^Z",32,"~:deprecated",true,"^[",["^10",["^11",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Performs in-place element-wise multiplication of numerical arrays.\n\n   Returns the first argument after mutation.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/emul!","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",32,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",1506,"^6W",true,"^Y",1506,"^17",2,"^1<",true,"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Performs in-place element-wise multiplication of numerical arrays.\n\n   Returns the first argument after mutation."],"~$diagonal",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1031,"^X",7,"^Y",1031,"^Z",15,"^[",["^10",["^11",["^10",[["~$m"],["~$m","~$k"]]]]],"^14","Returns the specified diagonal of a 2D matrix as a vector.\n   If k>0, returns a diagonal above the main diagonal.\n   If k<0, returns a diagonal below the main diagonal.\n   Works on both square and rectangular matrices.\n   Returns empty vector if value of k is out of range (outside matrix)","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","~$k"]]],"^[",["^10",[["~$m"],["~$m","~$k"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/diagonal","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",15,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","~$k"]]],"^[",["^10",[["~$m"],["~$m","~$k"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m"],["~$m","~$k"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1031,"^Y",1031,"^17",2,"^1<",true,"^[",["^10",[["~$m"],["~$m","~$k"]]],"^14","Returns the specified diagonal of a 2D matrix as a vector.\n   If k>0, returns a diagonal above the main diagonal.\n   If k<0, returns a diagonal below the main diagonal.\n   Works on both square and rectangular matrices.\n   Returns empty vector if value of k is out of range (outside matrix)"],"~$softmax!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1945,"^X",7,"^Y",1945,"^Z",15,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the softmax function for every element of a numerical vector. Mutates the vector."],"^B","~$clojure.core.matrix/softmax!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",15,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1945,"^Y",1945,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the softmax function for every element of a numerical vector. Mutates the vector."],"~$submatrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",940,"^X",7,"^Y",940,"^Z",16,"^[",["^10",["^11",["^10",[["~$m","~$index-ranges"],["~$m","^2A","~$index-range"],["~$m","~$row-start","~$row-length","~$col-start","~$col-length"]]]]],"^14","Gets a view of a submatrix, for a set of index ranges.\n   \n   Index ranges should be [start, length] pairs.\n   Index range pairs can be nil (gets the whole range)\n\n   May be a mutable view if supported by the implementation.","^15",["^ ","^16",false,"^17",5,"^18",["^10",[["~$m","^72"],["~$m","^2A","^73"],["~$m","^74","^75","^76","^77"]]],"^[",["^10",[["~$m","^72"],["~$m","^2A","^73"],["~$m","^74","^75","^76","^77"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/submatrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^15",["^ ","^16",false,"^17",5,"^18",["^10",[["~$m","^72"],["~$m","^2A","^73"],["~$m","^74","^75","^76","^77"]]],"^[",["^10",[["~$m","^72"],["~$m","^2A","^73"],["~$m","^74","^75","^76","^77"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$m","^72"],["~$m","^2A","^73"],["~$m","^74","^75","^76","^77"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",940,"^Y",940,"^17",5,"^1<",true,"^[",["^10",[["~$m","^72"],["~$m","^2A","^73"],["~$m","^74","^75","^76","^77"]]],"^14","Gets a view of a submatrix, for a set of index ranges.\n   \n   Index ranges should be [start, length] pairs.\n   Index range pairs can be nil (gets the whole range)\n\n   May be a mutable view if supported by the implementation."],"~$set-current-implementation",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2186,"^X",7,"^Y",2186,"^Z",33,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Sets the currently active core.matrix implementation.\n\n   Parameter may be\n    - A known keyword for the implementation e.g. :vectorz\n    - An existing instance from the implementation\n\n   This is used primarily for functions that construct new matrices, i.e. it determines the\n   implementation used for expressions like: (matrix [[1 2] [3 4]])"],"^B","~$clojure.core.matrix/set-current-implementation","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",33,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2186,"^Y",2186,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Sets the currently active core.matrix implementation.\n\n   Parameter may be\n    - A known keyword for the implementation e.g. :vectorz\n    - An existing instance from the implementation\n\n   This is used primarily for functions that construct new matrices, i.e. it determines the\n   implementation used for expressions like: (matrix [[1 2] [3 4]])"],"~$add!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1548,"^X",7,"^Y",1548,"^Z",11,"^[",["^10",["^11",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Performs element-wise mutable addition on one or more numerical arrays. This is the mutable\n   equivalent of `add`.\n\n   When adding many arrays, use of `add!` with a mutable array as the first argument is\n   usually faster than repreated use of `add` because it can avoid unnecessary copying.\n\n   Returns the first array after it has been mutated.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/add!","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",1548,"^Y",1548,"^17",2,"^1<",true,"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Performs element-wise mutable addition on one or more numerical arrays. This is the mutable\n   equivalent of `add`.\n\n   When adding many arrays, use of `add!` with a mutable array as the first argument is\n   usually faster than repreated use of `add` because it can avoid unnecessary copying.\n\n   Returns the first array after it has been mutated."],"~$tan!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the tan function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/tan!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the tan function on all elements of an array, using double precision values. Mutates the array in-place."],"~$lerp!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1609,"^X",7,"^Y",1609,"^Z",12,"^[",["^10",["^11",["^10",[["~$a","~$b","^20"]]]]],"^14","Performs linear interpolation between two arrays. If factor is 0.0, result will be equal to the first vector.\n   If factor is 1.0, result will be equal to the second vector. Returns a the mutated first array."],"^B","~$clojure.core.matrix/lerp!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^18",["^10",[["~$a","~$b","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1609,"^Y",1609,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$a","~$b","^20"]]]]],"^14","Performs linear interpolation between two arrays. If factor is 0.0, result will be equal to the first vector.\n   If factor is 1.0, result will be equal to the second vector. Returns a the mutated first array."],"~$set-indices!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",931,"^X",7,"^Y",931,"^Z",19,"^[",["^10",["^11",["^10",[["~$a","^3I","^3J"]]]]],"^14","like set-indices but destructively modifies array in place"],"^B","~$clojure.core.matrix/set-indices!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",19,"^18",["^10",[["~$a","^3I","^3J"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",931,"^Y",931,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$a","^3I","^3J"]]]]],"^14","like set-indices but destructively modifies array in place"],"~$sub",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1669,"^X",7,"^Y",1669,"^Z",10,"^[",["^10",["^11",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Performs element-wise subtraction on one or more numerical arrays.\n\n   For a single argument, returns the negation.\n\n   Returns a new array.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/sub","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",10,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",1669,"^Y",1669,"^17",2,"^1<",true,"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Performs element-wise subtraction on one or more numerical arrays.\n\n   For a single argument, returns the negation.\n\n   Returns a new array."],"~$add-row",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1965,"^X",7,"^Y",1965,"^Z",14,"^[",["^10",["^11",["^10",[["~$m","~$i","~$j"],["~$m","~$i","~$j","^20"]]]]],"^14","Add a row j (optionally multiplied by a scalar factor) to a row i\n   and replace row i with the result","^15",["^ ","^16",false,"^17",4,"^18",["^10",[["~$m","~$i","~$j"],["~$m","~$i","~$j","^20"]]],"^[",["^10",[["~$m","~$i","~$j"],["~$m","~$i","~$j","^20"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/add-row","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^15",["^ ","^16",false,"^17",4,"^18",["^10",[["~$m","~$i","~$j"],["~$m","~$i","~$j","^20"]]],"^[",["^10",[["~$m","~$i","~$j"],["~$m","~$i","~$j","^20"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","~$i","~$j"],["~$m","~$i","~$j","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1965,"^Y",1965,"^17",4,"^1<",true,"^[",["^10",[["~$m","~$i","~$j"],["~$m","~$i","~$j","^20"]]],"^14","Add a row j (optionally multiplied by a scalar factor) to a row i\n   and replace row i with the result"],"~$slice-dims",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",836,"^X",8,"^Y",836,"^Z",18,"^2Y",true,"^[",["^10",["^11",["^10",[["~$m","^4>","~$slice-func"]]]]],"^14","Slices along all dimensions where there is a numerical argument"],"^2Y",true,"^B","~$clojure.core.matrix/slice-dims","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^18",["^10",[["~$m","^4>","^7H"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",836,"^Y",836,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^4>","^7H"]]]]],"^14","Slices along all dimensions where there is a numerical argument"],"~$column-matrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",218,"^X",7,"^Y",218,"^Z",20,"^[",["^10",["^11",["^10",[["^12"],["^13","^12"]]]]],"^14","Constructs a column matrix with the given data. The returned matrix is a 2D Nx1 column matrix.\n\n   The data must be either a valid existing vector or a sequence of scalar values.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/column-matrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",20,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^12"],["^13","^12"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",218,"^Y",218,"^17",2,"^1<",true,"^[",["^10",[["^12"],["^13","^12"]]],"^14","Constructs a column matrix with the given data. The returned matrix is a 2D Nx1 column matrix.\n\n   The data must be either a valid existing vector or a sequence of scalar values."],"~$exp!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the exp function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/exp!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the exp function on all elements of an array, using double precision values. Mutates the array in-place."],"~$add-scaled",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1577,"^X",7,"^Y",1577,"^Z",17,"^[",["^10",["^11",["^10",[["~$m","~$a","^20"]]]]],"^14","Adds a numerical array scaled by a given factor to the first array"],"^B","~$clojure.core.matrix/add-scaled","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^18",["^10",[["~$m","~$a","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1577,"^Y",1577,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a","^20"]]]]],"^14","Adds a numerical array scaled by a given factor to the first array"],"~$cmp",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1234,"^X",7,"^Y",1234,"^Z",10,"^[",["^10",["^11",["^10",[["~$a","~$b"]]]]],"^14","Element-wise of comparisons of two arrays. Returns the signum of the difference\n   between corresponding elements in two arrays.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (cmp 1 3) ;=> -1\n  (cmp 0 0) ;=> 0\n  (cmp 1 -1) ;=> 1\n  (cmp [[1 3] [5 5]] [[3 3] [5 3]]) ;=> [[-1 0] [0 1]]\n  (cmp [[1 4][1 5][1 8]] [[1 2][1 5][2 7]]) ;=> [[0 1][0 0][-1 1]]\n  "],"^B","~$clojure.core.matrix/cmp","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",10,"^18",["^10",[["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1234,"^Y",1234,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$a","~$b"]]]]],"^14","Element-wise of comparisons of two arrays. Returns the signum of the difference\n   between corresponding elements in two arrays.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (cmp 1 3) ;=> -1\n  (cmp 0 0) ;=> 0\n  (cmp 1 -1) ;=> 1\n  (cmp [[1 3] [5 5]] [[3 3] [5 3]]) ;=> [[-1 0] [0 1]]\n  (cmp [[1 4][1 5][1 8]] [[1 2][1 5][2 7]]) ;=> [[0 1][0 0][-1 1]]\n  "],"~$sqrt",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sqrt function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/sqrt","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sqrt function on all elements of an array, using double precision values. Returns a new array."],"~$vec?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",473,"^X",7,"^Y",473,"^Z",11,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a core.matrix vector (1-dimensional array)"],"^B","~$clojure.core.matrix/vec?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",473,"^Y",473,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a core.matrix vector (1-dimensional array)"],"~$scale!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1708,"^X",7,"^Y",1708,"^Z",13,"^[",["^10",["^11",["^10",[["~$m","^20"],["~$m","^20","~$&","~$more-factors"]]]]],"^14","Scales a numerical array by one or more scalar factors (in place). The default implementation supports\n   numerical arrays and numbers as scalar values, however matrix implementations may extend this to\n   support other scalar types.\n\n   Returns the matrix after it has been mutated.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","^20"]]],"^[",["^10",[["~$m","^20"],["~$m","^20","~$&","^7W"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/scale!","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","^20"]]],"^[",["^10",[["~$m","^20"],["~$m","^20","~$&","^7W"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1708,"^Y",1708,"^17",2,"^1<",true,"^[",["^10",[["~$m","^20"],["~$m","^20","~$&","^7W"]]],"^14","Scales a numerical array by one or more scalar factors (in place). The default implementation supports\n   numerical arrays and numbers as scalar values, however matrix implementations may extend this to\n   support other scalar types.\n\n   Returns the matrix after it has been mutated."],"~$scale",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1698,"^X",7,"^Y",1698,"^Z",12,"^[",["^10",["^11",["^10",[["~$m","^20"],["~$m","^20","~$&","^7W"]]]]],"^14","Scales a array by one or more scalar factors. The default implementation supports numerical arrays and\n   numbers as scalar values, however matrix implementations may extend this to support other scalar types.\n\n   Returns a new scaled matrix.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","^20"]]],"^[",["^10",[["~$m","^20"],["~$m","^20","~$&","^7W"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/scale","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","^20"]]],"^[",["^10",[["~$m","^20"],["~$m","^20","~$&","^7W"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1698,"^Y",1698,"^17",2,"^1<",true,"^[",["^10",[["~$m","^20"],["~$m","^20","~$&","^7W"]]],"^14","Scales a array by one or more scalar factors. The default implementation supports numerical arrays and\n   numbers as scalar values, however matrix implementations may extend this to support other scalar types.\n\n   Returns a new scaled matrix."],"~$set-column!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1989,"^X",7,"^Y",1989,"^Z",18,"^[",["^10",["^11",["^10",[["~$m","~$i","~$column"]]]]],"^14","Sets a column in a matrix using a specified vector."],"^B","~$clojure.core.matrix/set-column!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^18",["^10",[["~$m","~$i","^80"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1989,"^Y",1989,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$i","^80"]]]]],"^14","Sets a column in a matrix using a specified vector."],"~$softplus!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1923,"^X",7,"^Y",1923,"^Z",16,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the softplus function for every element of an array. Mutates the array."],"^B","~$clojure.core.matrix/softplus!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1923,"^Y",1923,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the softplus function for every element of an array. Mutates the array."],"~$subvector",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",954,"^X",7,"^Y",954,"^Z",16,"^[",["^10",["^11",["^10",[["~$m","~$start","^5D"]]]]],"^14","Gets a view of part of a vector, specifed by a start index and length.\n\n   The view maintains a reference to the original,\n   so can be used to modify the original vector if it is mutable."],"^B","~$clojure.core.matrix/subvector","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$m","^85","^5D"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",954,"^Y",954,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^85","^5D"]]]]],"^14","Gets a view of part of a vector, specifed by a start index and length.\n\n   The view maintains a reference to the original,\n   so can be used to modify the original vector if it is mutable."],"~$inner-product",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1756,"^X",7,"^Y",1756,"^Z",20,"^[",["^10",["^11",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Computes the inner product of numerical arrays.\n\n   For matrix/matrix and matrix/vector arguments, this is equivalent to matrix multiplication.\n\n   The inner product of two arrays with indexed dimensions {..i j} and {j k..} has dimensions {..i k..}. The inner-product of two vectors will be scalar.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]]],"^B","~$clojure.core.matrix/inner-product","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",20,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]],"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null,null]],"^X",1,"^W",1756,"^Y",1756,"^17",2,"^1<",true,"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Computes the inner product of numerical arrays.\n\n   For matrix/matrix and matrix/vector arguments, this is equivalent to matrix multiplication.\n\n   The inner product of two arrays with indexed dimensions {..i j} and {j k..} has dimensions {..i k..}. The inner-product of two vectors will be scalar."],"~$sparse?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",530,"^X",7,"^Y",530,"^Z",14,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if an array is sparse, i.e. the implementation supports storage of the entire\n   array in less memory than would normally be implied by the number of elements.\n\n   Sparse matrices may have memory requirements that scale with the number of non-zero elements\n   rather than the total number of elements, for example."],"^B","~$clojure.core.matrix/sparse?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",530,"^Y",530,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if an array is sparse, i.e. the implementation supports storage of the entire\n   array in less memory than would normally be implied by the number of elements.\n\n   Sparse matrices may have memory requirements that scale with the number of non-zero elements\n   rather than the total number of elements, for example."],"~$to-degrees!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the to-degrees function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/to-degrees!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the to-degrees function on all elements of an array, using double precision values. Mutates the array in-place."],"~$cbrt!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cbrt function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/cbrt!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cbrt function on all elements of an array, using double precision values. Mutates the array in-place."],"~$inverse",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1816,"^X",7,"^Y",1816,"^Z",14,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the inverse of a 2D numerical matrix.\n\n   Returns nil if the matrix is singular. May throw an exception if the implementation does not support inverses."],"^B","~$clojure.core.matrix/inverse","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1816,"^Y",1816,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the inverse of a 2D numerical matrix.\n\n   Returns nil if the matrix is singular. May throw an exception if the implementation does not support inverses."],"~$square?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",590,"^X",7,"^Y",590,"^Z",14,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if matrix is square (i.e. a 2D array with same number of rows and columns)"],"^B","~$clojure.core.matrix/square?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",590,"^Y",590,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if matrix is square (i.e. a 2D array with same number of rows and columns)"],"~$transpose",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1169,"^X",7,"^Y",1169,"^Z",16,"^[",["^10",["^11",["^10",[["~$m"],["~$m","~$ordering"]]]]],"^14","Transposes a matrix, returning a new matrix. For 2D matrices, rows and columns are swapped.\n   More generally, the dimension indices are reversed for any shape of array. Note that 1D vectors\n   and scalars will be returned unchanged.\n\n   If ordering is provided, will re-order dimensions according to the provided order.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","^8D"]]],"^[",["^10",[["~$m"],["~$m","^8D"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/transpose","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","^8D"]]],"^[",["^10",[["~$m"],["~$m","^8D"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m"],["~$m","^8D"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1169,"^Y",1169,"^17",2,"^1<",true,"^[",["^10",[["~$m"],["~$m","^8D"]]],"^14","Transposes a matrix, returning a new matrix. For 2D matrices, rows and columns are swapped.\n   More generally, the dimension indices are reversed for any shape of array. Note that 1D vectors\n   and scalars will be returned unchanged.\n\n   If ordering is provided, will re-order dimensions according to the provided order."],"^4D",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1016,"^X",7,"^Y",1016,"^Z",14,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the columns of a matrix, as a sequence of 1D vectors.\n\n   If the array has more than 2 dimensions, will return the columns from all slices in order."],"^B","~$clojure.core.matrix/columns","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1016,"^Y",1016,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the columns of a matrix, as a sequence of 1D vectors.\n\n   If the array has more than 2 dimensions, will return the columns from all slices in order."],"~$e==",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1388,"^X",7,"^Y",1388,"^Z",10,"^[",["^10",["^11",["^10",[["^2S"],["^2S","^2T"],["^2S","^2T","~$&","^1@"]]]]],"^14","Returns true if all corresponding array elements are numerically equal.\n\n   Throws an error if any elements of the arrays being compared are not numerical values.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["^2S"],["^2S","^2T"]]],"^[",["^10",[["^2S"],["^2S","^2T"],["^2S","^2T","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/e==","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",10,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["^2S"],["^2S","^2T"]]],"^[",["^10",[["^2S"],["^2S","^2T"],["^2S","^2T","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["^2S"],["^2S","^2T"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",1388,"^Y",1388,"^17",2,"^1<",true,"^[",["^10",[["^2S"],["^2S","^2T"],["^2S","^2T","~$&","^1@"]]],"^14","Returns true if all corresponding array elements are numerically equal.\n\n   Throws an error if any elements of the arrays being compared are not numerical values."],"~$det",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1807,"^X",7,"^Y",1807,"^Z",10,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Calculates the determinant of a 2D square numerical matrix.\n\n   May throw an exception if the implementation does not support computation of determinants."],"^B","~$clojure.core.matrix/det","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",10,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1807,"^Y",1807,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Calculates the determinant of a 2D square numerical matrix.\n\n   May throw an exception if the implementation does not support computation of determinants."],"~$broadcast",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1146,"^X",7,"^Y",1146,"^Z",16,"^[",["^10",["^11",["^10",[["~$m","^5<"]]]]],"^14","Broadcasts a matrix to a specified shape. Returns a new matrix with the shape specified.\n   The broadcasted matrix may be a view over the original matrix: attempting to modify the\n   broadcasted matrix therefore has undefined results.\n\n   Will throw an exception if broadcast to the target shape is not possible."],"^B","~$clojure.core.matrix/broadcast","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$m","^5<"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1146,"^Y",1146,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^5<"]]]]],"^14","Broadcasts a matrix to a specified shape. Returns a new matrix with the shape specified.\n   The broadcasted matrix may be a view over the original matrix: attempting to modify the\n   broadcasted matrix therefore has undefined results.\n\n   Will throw an exception if broadcast to the target shape is not possible."],"~$zero-matrix?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",498,"^X",7,"^Y",498,"^Z",19,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if all the elements of the parameter are zero."],"^B","~$clojure.core.matrix/zero-matrix?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",19,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",498,"^Y",498,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if all the elements of the parameter are zero."],"~$trace",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1834,"^X",7,"^Y",1834,"^Z",12,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Calculates the trace of a 2D numerical matrix (sum of elements on main diagonal).\n\n   The matrix need not be square."],"^B","~$clojure.core.matrix/trace","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1834,"^Y",1834,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Calculates the trace of a 2D numerical matrix (sum of elements on main diagonal).\n\n   The matrix need not be square."],"~$zero-vector",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",124,"^X",7,"^Y",124,"^Z",18,"^[",["^10",["^11",["^10",[["^5D"],["^13","^5D"]]]]],"^14","Constructs a new zero-filled numerical vector with the given length.\n\n   Implementations are encouraged to return immutable vectors or sparse vectors\n   for efficency whre available.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5D"],["^13","^5D"]]],"^[",["^10",[["^5D"],["^13","^5D"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/zero-vector","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5D"],["^13","^5D"]]],"^[",["^10",[["^5D"],["^13","^5D"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^5D"],["^13","^5D"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",124,"^Y",124,"^17",2,"^1<",true,"^[",["^10",[["^5D"],["^13","^5D"]]],"^14","Constructs a new zero-filled numerical vector with the given length.\n\n   Implementations are encouraged to return immutable vectors or sparse vectors\n   for efficency whre available."],"~$conforming?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",667,"^X",7,"^Y",667,"^Z",18,"^[",["^10",["^11",["^10",[["~$a"],["~$a","~$b"]]]]],"^14","Returns true if two arrays have a conforming shape. Two arrays are conforming if there\n   exists a common shape that both can broadcast to. This is a requirement for element-wise\n   operations to work correctly on two different-shaped arrays.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/conforming?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",667,"^Y",667,"^17",2,"^1<",true,"^[",["^10",[["~$a"],["~$a","~$b"]]],"^14","Returns true if two arrays have a conforming shape. Two arrays are conforming if there\n   exists a common shape that both can broadcast to. This is a requirement for element-wise\n   operations to work correctly on two different-shaped arrays."],"~$ecount",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",578,"^X",7,"^Y",578,"^Z",13,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the total count of elements in an array, as an integer value.\n\n   Equal to the product of the lengths of each dimension in the array's shape.\n\n   Result will usually be a Long, however callers should note that for very large sparse arrays\n   the element count may be a BigInteger, i.e. equal to or larger than 2^63.\n\n   Returns 1 for a zero-dimensional array or scalar. "],"^B","~$clojure.core.matrix/ecount","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",578,"^Y",578,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the total count of elements in an array, as an integer value.\n\n   Equal to the product of the lengths of each dimension in the array's shape.\n\n   Result will usually be a Long, however callers should note that for very large sparse arrays\n   the element count may be a BigInteger, i.e. equal to or larger than 2^63.\n\n   Returns 1 for a zero-dimensional array or scalar. "],"~$fill",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1207,"^X",7,"^Y",1207,"^Z",11,"^[",["^10",["^11",["^10",[["~$m","^68"]]]]],"^14","Fills a matrix with a single scalar value. The scalar value must be compatible with the element-type\n   of the array. Returns a new array.\n\n   Functionally similar to `assign!` except only intended for use with a scalar value."],"^B","~$clojure.core.matrix/fill","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^18",["^10",[["~$m","^68"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1207,"^Y",1207,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^68"]]]]],"^14","Fills a matrix with a single scalar value. The scalar value must be compatible with the element-type\n   of the array. Returns a new array.\n\n   Functionally similar to `assign!` except only intended for use with a scalar value."],"~$set-row!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1978,"^X",7,"^Y",1978,"^Z",15,"^[",["^10",["^11",["^10",[["~$m","~$i","^49"]]]]],"^14","Sets a row in a matrix in-place using a specified vector."],"^B","~$clojure.core.matrix/set-row!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",15,"^18",["^10",[["~$m","~$i","^49"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1978,"^Y",1978,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$i","^49"]]]]],"^14","Sets a row in a matrix in-place using a specified vector."],"~$pow",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1861,"^X",7,"^Y",1861,"^Z",10,"^[",["^10",["^11",["^10",[["~$m"],["~$m","~$exponent"],["~$m","^90","~$&","^1@"]]]]],"^14","Raises every element of a numerical matrix by the given exponent.\n\n   Note that behaviour for large exponents may depend on the underlying implementation:\n   for example double-based matrices may overflow to Double/POSITIVE_INFINITY.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m"],["~$m","^90"]]],"^[",["^10",[["~$m"],["~$m","^90"],["~$m","^90","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/pow","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",10,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m"],["~$m","^90"]]],"^[",["^10",[["~$m"],["~$m","^90"],["~$m","^90","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$m"],["~$m","^90"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",1861,"^Y",1861,"^17",2,"^1<",true,"^[",["^10",[["~$m"],["~$m","^90"],["~$m","^90","~$&","^1@"]]],"^14","Raises every element of a numerical matrix by the given exponent.\n\n   Note that behaviour for large exponents may depend on the underlying implementation:\n   for example double-based matrices may overflow to Double/POSITIVE_INFINITY."],"~$set-selection!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",909,"^X",7,"^Y",909,"^Z",21,"^[",["^10",["^11",["^10",[["~$a","~$&","^4>"]]]]],"^14","Like set-selection but mutates the array in place. Will throw an error if array is immutable.","^15",["^ ","^16",true,"^17",1,"^18",[["^10",["~$a","^4>"]]],"^[",["^10",[["~$a","~$&","^4>"]]],"^19",["^10",[null]]]],"^B","~$clojure.core.matrix/set-selection!","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",21,"^15",["^ ","^16",true,"^17",1,"^18",[["^10",["~$a","^4>"]]],"^[",["^10",[["~$a","~$&","^4>"]]],"^19",["^10",[null]]],"^18",[["^10",["~$a","^4>"]]],"^1;",null,"^19",["^10",[null]],"^X",1,"^W",909,"^Y",909,"^17",1,"^1<",true,"^[",["^10",[["~$a","~$&","^4>"]]],"^14","Like set-selection but mutates the array in place. Will throw an error if array is immutable."],"~$exp",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the exp function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/exp","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the exp function on all elements of an array, using double precision values. Returns a new array."],"~$mset!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^Z",12,"^15",["^ ","^16",true,"^17",5,"^18",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"],["~$m","~$x","~$y","~$z","~$v"]]],"^[",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"],["~$m","~$x","~$y","~$z","~$v"],["~$m","~$x","~$y","~$z","~$t","~$&","^1@"]]],"^19",["^10",[null,null,null,null,null]]],"^5I",["^>",[4,3,2]],"^X",7,"^W",791,"^Y",791,"^[",["^10",["^11",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"],["~$m","~$x","~$y","~$z","~$v"],["~$m","~$x","~$y","~$z","~$t","~$&","^1@"]]]]],"^14","Mutates a scalar value in an array at the specified position. Supports any number of dimensions.\n\n   Will throw an exception if the matrix is not mutable at the specified position. Note that it\n   is possible for some arrays to be mutable in places and immutable in others (e.g. sparse arrays)\n\n   Returns the modified matrix (it is guaranteed to return the same instance)","^3Y",["^10",["^3Z",["^10",[["~$m","~$v"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/set-0d!"]]]],["^10",["^42","~$m"]],["^10",["^42","~$v"]]]]]]]]]],["^10",[["~$m","~$x","~$v"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/set-1d!"]]]],["^10",["^42","~$m"]],["^10",["^42","~$x"]],["^10",["^42","~$v"]]]]]]]]]],["^10",[["~$m","~$x","~$y","~$v"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/set-2d!"]]]],["^10",["^42","~$m"]],["^10",["^42","~$x"]],["^10",["^42","~$y"]],["^10",["^42","~$v"]]]]]]]]]]]]],"^B","~$clojure.core.matrix/mset!","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^15",["^ ","^16",true,"^17",5,"^18",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"],["~$m","~$x","~$y","~$z","~$v"]]],"^[",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"],["~$m","~$x","~$y","~$z","~$v"],["~$m","~$x","~$y","~$z","~$t","~$&","^1@"]]],"^19",["^10",[null,null,null,null,null]]],"^18",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"],["~$m","~$x","~$y","~$z","~$v"]]],"^5I",["^>",[4,3,2]],"^1;",null,"^19",["^10",[null,null,null,null,null]],"^X",1,"^W",791,"^Y",791,"^17",5,"^1<",true,"^[",["^10",[["~$m","~$v"],["~$m","~$x","~$v"],["~$m","~$x","~$y","~$v"],["~$m","~$x","~$y","~$z","~$v"],["~$m","~$x","~$y","~$z","~$t","~$&","^1@"]]],"^14","Mutates a scalar value in an array at the specified position. Supports any number of dimensions.\n\n   Will throw an exception if the matrix is not mutable at the specified position. Note that it\n   is possible for some arrays to be mutable in places and immutable in others (e.g. sparse arrays)\n\n   Returns the modified matrix (it is guaranteed to return the same instance)","^3Y",["^10",["^3Z",["^10",[["~$m","~$v"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^97"]]]],["^10",["^42","~$m"]],["^10",["^42","~$v"]]]]]]]]]],["^10",[["~$m","~$x","~$v"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^98"]]]],["^10",["^42","~$m"]],["^10",["^42","~$x"]],["^10",["^42","~$v"]]]]]]]]]],["^10",[["~$m","~$x","~$y","~$v"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^99"]]]],["^10",["^42","~$m"]],["^10",["^42","~$x"]],["^10",["^42","~$y"]],["^10",["^42","~$v"]]]]]]]]]]]]],"~$rank",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",609,"^X",7,"^Y",609,"^Z",11,"^[",["^10",["^11",["^10",[["~$a"],["~$comparator","~$a"]]]]],"^14","Returns the rank of each element in an array, as an array of indexes with 0 being first, in ascending order.\n\n   If passed a higher dimensional array, returns an array of ranks along the last dimension.\n\n   An optional comparator may be provided, otherwise the default comparator will be used. Comparator should\n   support java.util.Comparator on the JVM, although some implementations may support alternative comparator types \n   e.g. Clojure predicates. Please check the documentation for your core.matrix implementation.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$a"],["^9<","~$a"]]],"^[",["^10",[["~$a"],["^9<","~$a"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/rank","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$a"],["^9<","~$a"]]],"^[",["^10",[["~$a"],["^9<","~$a"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$a"],["^9<","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",609,"^Y",609,"^17",2,"^1<",true,"^[",["^10",[["~$a"],["^9<","~$a"]]],"^14","Returns the rank of each element in an array, as an array of indexes with 0 being first, in ascending order.\n\n   If passed a higher dimensional array, returns an array of ranks along the last dimension.\n\n   An optional comparator may be provided, otherwise the default comparator will be used. Comparator should\n   support java.util.Comparator on the JVM, although some implementations may support alternative comparator types \n   e.g. Clojure predicates. Please check the documentation for your core.matrix implementation."],"~$fill!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1198,"^X",7,"^Y",1198,"^Z",12,"^[",["^10",["^11",["^10",[["~$m","^68"]]]]],"^14","Fills a matrix with a single scalar value. The scalar value must be compatible with the element-type\n   of the array.\n\n   Similar to assign!, but only supports scalar values (and may be more efficient)."],"^B","~$clojure.core.matrix/fill!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^18",["^10",[["~$m","^68"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1198,"^Y",1198,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^68"]]]]],"^14","Fills a matrix with a single scalar value. The scalar value must be compatible with the element-type\n   of the array.\n\n   Similar to assign!, but only supports scalar values (and may be more efficient)."],"~$matrix?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",468,"^X",7,"^Y",468,"^Z",14,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if parameter is a valid core.matrix matrix (i.e. an array with dimensionality == 2)"],"^B","~$clojure.core.matrix/matrix?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",468,"^Y",468,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if parameter is a valid core.matrix matrix (i.e. an array with dimensionality == 2)"],"~$maximum",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2087,"^X",7,"^Y",2087,"^Z",14,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the maximum element value from a numerical array"],"^B","~$clojure.core.matrix/maximum","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2087,"^Y",2087,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the maximum element value from a numerical array"],"~$length-squared",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1856,"^X",27,"^Y",1856,"^Z",41,"^6W",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","DEPRECATED: please use magnitude-squared instead."],"^B","~$clojure.core.matrix/length-squared","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",41,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1856,"^6W",true,"^Y",1856,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","DEPRECATED: please use magnitude-squared instead."],"~$emul",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1437,"^X",27,"^Y",1437,"^Z",31,"^6W",true,"^[",["^10",["^11",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","DEPRECATED: please use mul instead.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]]],"^B","~$clojure.core.matrix/emul","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",31,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]],"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null,null]],"^X",1,"^W",1437,"^6W",true,"^Y",1437,"^17",2,"^1<",true,"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","DEPRECATED: please use mul instead."],"~$emin",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2072,"^X",7,"^Y",2072,"^Z",11,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the minimum element value from a numerical array"],"^B","~$clojure.core.matrix/emin","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2072,"^Y",2072,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the minimum element value from a numerical array"],"~$add-scaled-product!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1628,"^X",7,"^Y",1628,"^Z",26,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b","^20"]]]]],"^14","Adds the product of two numerical arrays scaled by a given factor to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (mul a b factor)) but may be optimised by the underlying implementation."],"^B","~$clojure.core.matrix/add-scaled-product!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",26,"^18",["^10",[["~$m","~$a","~$b","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1628,"^Y",1628,"^17",4,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b","^20"]]]]],"^14","Adds the product of two numerical arrays scaled by a given factor to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (mul a b factor)) but may be optimised by the underlying implementation."],"~$add-product!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1571,"^X",7,"^Y",1571,"^Z",19,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b"]]]]],"^14","Adds the product of two numerical arrays to the first array. Returns the mutated array."],"^B","~$clojure.core.matrix/add-product!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",19,"^18",["^10",[["~$m","~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1571,"^Y",1571,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b"]]]]],"^14","Adds the product of two numerical arrays to the first array. Returns the mutated array."],"~$conjoin-along",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1077,"^X",7,"^Y",1077,"^Z",20,"^[",["^10",["^11",["^10",[["^3X","~$a","~$b"],["^3X","~$a","~$b","~$&","^1@"]]]]],"^14","Adds a new value [b] as a new slice to an array [a] along the given dimension,\n   returning the extended array.\n   Broadcasts the new value to the correct shape of a slice of a if necessary.\n\n   This can be considered as the array equivalent of clojure.core/conj using\n   a specified dimension","^15",["^ ","^16",true,"^17",3,"^18",["^10",[["^3X","~$a","~$b"]]],"^[",["^10",[["^3X","~$a","~$b"],["^3X","~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/conjoin-along","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",20,"^15",["^ ","^16",true,"^17",3,"^18",["^10",[["^3X","~$a","~$b"]]],"^[",["^10",[["^3X","~$a","~$b"],["^3X","~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^3X","~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1077,"^Y",1077,"^17",3,"^1<",true,"^[",["^10",[["^3X","~$a","~$b"],["^3X","~$a","~$b","~$&","^1@"]]],"^14","Adds a new value [b] as a new slice to an array [a] along the given dimension,\n   returning the extended array.\n   Broadcasts the new value to the correct shape of a slice of a if necessary.\n\n   This can be considered as the array equivalent of clojure.core/conj using\n   a specified dimension"],"~$slice-map",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2058,"^X",7,"^Y",2058,"^Z",16,"^[",["^10",["^11",["^10",[["~$f","~$m"],["~$f","^2S","^2T"],["~$f","^2S","^2T","~$&","^1@"]]]]],"^14","Maps a function over all slices of one or more array","^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","^2S","^2T"]]],"^[",["^10",[["~$f","~$m"],["~$f","^2S","^2T"],["~$f","^2S","^2T","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/slice-map","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","^2S","^2T"]]],"^[",["^10",[["~$f","~$m"],["~$f","^2S","^2T"],["~$f","^2S","^2T","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$f","~$m"],["~$f","^2S","^2T"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",2058,"^Y",2058,"^17",3,"^1<",true,"^[",["^10",[["~$f","~$m"],["~$f","^2S","^2T"],["~$f","^2S","^2T","~$&","^1@"]]],"^14","Maps a function over all slices of one or more array"],"~$lower-triangular?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",518,"^X",7,"^Y",518,"^Z",24,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a lower triangular matrix."],"^B","~$clojure.core.matrix/lower-triangular?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",24,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",518,"^Y",518,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a lower triangular matrix."],"~$add-outer-product!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1647,"^X",7,"^Y",1647,"^Z",25,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]]]],"^14","Adds the inner product of two numerical arrays to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (outer-product a b)) but may be optimised by the underlying implementation.","^15",["^ ","^16",false,"^17",4,"^18",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^[",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/add-outer-product!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",25,"^15",["^ ","^16",false,"^17",4,"^18",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^[",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1647,"^Y",1647,"^17",4,"^1<",true,"^[",["^10",[["~$m","~$a","~$b"],["~$m","~$a","~$b","^20"]]],"^14","Adds the inner product of two numerical arrays to the first array.\n   Returns the mutated array.\n   This is equivalent to (add! m (outer-product a b)) but may be optimised by the underlying implementation."],"~$ereduce",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2024,"^X",7,"^Y",2024,"^Z",14,"^[",["^10",["^11",["^10",[["~$f","~$m"],["~$f","~$init","~$m"]]]]],"^14","Element-wise reduce on all elements of an array.","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","^9W","~$m"]]],"^[",["^10",[["~$f","~$m"],["~$f","^9W","~$m"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/ereduce","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","^9W","~$m"]]],"^[",["^10",[["~$f","~$m"],["~$f","^9W","~$m"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$f","~$m"],["~$f","^9W","~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2024,"^Y",2024,"^17",3,"^1<",true,"^[",["^10",[["~$f","~$m"],["~$f","^9W","~$m"]]],"^14","Element-wise reduce on all elements of an array."],"~$cosh",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cosh function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/cosh","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the cosh function on all elements of an array, using double precision values. Returns a new array."],"~$scale-add!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1592,"^X",7,"^Y",1592,"^Z",17,"^[",["^10",["^11",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","~$constant"]]]]],"^14","Scales array m1 by factor a, then adds an array m2 scaled by factor b. May optionally add a constant.\n   Broadly equivalent to (add! (mul! m1 a) (mul m2 b) constant)\n\n   Returns the mutated array `m1`. The array `m2` will not be changed.","^15",["^ ","^16",false,"^17",5,"^18",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^[",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/scale-add!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^15",["^ ","^16",false,"^17",5,"^18",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^[",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1592,"^Y",1592,"^17",5,"^1<",true,"^[",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^14","Scales array m1 by factor a, then adds an array m2 scaled by factor b. May optionally add a constant.\n   Broadly equivalent to (add! (mul! m1 a) (mul m2 b) constant)\n\n   Returns the mutated array `m1`. The array `m2` will not be changed."],"~$div!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1476,"^X",7,"^Y",1476,"^Z",11,"^[",["^10",["^11",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Performs in-place element-wise matrix division for numerical arrays.\n\n   Computes the reciprocal of each element when passed a single argument (similar to clojure.core//).","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/div!","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",1476,"^Y",1476,"^17",2,"^1<",true,"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Performs in-place element-wise matrix division for numerical arrays.\n\n   Computes the reciprocal of each element when passed a single argument (similar to clojure.core//)."],"~$upper-triangular?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",513,"^X",7,"^Y",513,"^Z",24,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a upper triangular matrix."],"^B","~$clojure.core.matrix/upper-triangular?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",24,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",513,"^Y",513,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a upper triangular matrix."],"~$native?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",367,"^X",7,"^Y",367,"^Z",14,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Returns true if the array is in a native format.\n\n   Native formats are implementation defined, and may use non-Java resources (e.g. GPU memory)."],"^B","~$clojure.core.matrix/native?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",367,"^Y",367,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Returns true if the array is in a native format.\n\n   Native formats are implementation defined, and may use non-Java resources (e.g. GPU memory)."],"~$join-along",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1054,"^X",7,"^Y",1054,"^Z",17,"^[",["^10",["^11",["^10",[["^2A","~$&","^3S"]]]]],"^14","Joins arrays together, concatenating them along the specified dimension.\n\n   Other dimensions must be compatible.","^15",["^ ","^16",true,"^17",1,"^18",[["^10",["^2A","^3S"]]],"^[",["^10",[["^2A","~$&","^3S"]]],"^19",["^10",[null]]]],"^B","~$clojure.core.matrix/join-along","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^15",["^ ","^16",true,"^17",1,"^18",[["^10",["^2A","^3S"]]],"^[",["^10",[["^2A","~$&","^3S"]]],"^19",["^10",[null]]],"^18",[["^10",["^2A","^3S"]]],"^1;",null,"^19",["^10",[null]],"^X",1,"^W",1054,"^Y",1054,"^17",1,"^1<",true,"^[",["^10",[["^2A","~$&","^3S"]]],"^14","Joins arrays together, concatenating them along the specified dimension.\n\n   Other dimensions must be compatible."],"~$assign-array!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",412,"^X",7,"^Y",412,"^Z",20,"^[",["^10",["^11",["^10",[["~$m","~$arr"],["~$m","^:;","~$offset"]]]]],"^14","Assigns values to a core.matrix array from a Java array, in element-wise order. Element type of Java array must be compatible.\n   Returns the mutated core.matrix array","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","^:;"],["~$m","^:;","^:<"]]],"^[",["^10",[["~$m","^:;"],["~$m","^:;","^:<"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/assign-array!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",20,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","^:;"],["~$m","^:;","^:<"]]],"^[",["^10",[["~$m","^:;"],["~$m","^:;","^:<"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","^:;"],["~$m","^:;","^:<"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",412,"^Y",412,"^17",3,"^1<",true,"^[",["^10",[["~$m","^:;"],["~$m","^:;","^:<"]]],"^14","Assigns values to a core.matrix array from a Java array, in element-wise order. Element type of Java array must be compatible.\n   Returns the mutated core.matrix array"],"~$broadcast-like",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1156,"^X",7,"^Y",1156,"^Z",21,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Broadcasts the second matrix to the shape of the first. See 'broadcast'.","^3Y",["^10",["^3Z",["^10",[["~$m","~$a"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/broadcast-like"]]]],["^10",["^42","~$m"]],["^10",["^42","~$a"]]]]]]]]]]]]],"^B","~$clojure.core.matrix/broadcast-like","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",21,"^18",["^10",[["~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1156,"^Y",1156,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Broadcasts the second matrix to the shape of the first. See 'broadcast'.","^3Y",["^10",["^3Z",["^10",[["~$m","~$a"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^:?"]]]],["^10",["^42","~$m"]],["^10",["^42","~$a"]]]]]]]]]]]]],"~$sparse-array",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",308,"^X",7,"^Y",308,"^Z",19,"^[",["^10",["^11",["^10",[["^12"],["^13","^12"]]]]],"^14","Creates a sparse array with the given data, using a specified implementation\n  or the current implementation if not specified.\n\n  Throws an exception if creation of a sparse array is not possible","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/sparse-array","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",19,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^12"],["^13","^12"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",308,"^Y",308,"^17",2,"^1<",true,"^[",["^10",[["^12"],["^13","^12"]]],"^14","Creates a sparse array with the given data, using a specified implementation\n  or the current implementation if not specified.\n\n  Throws an exception if creation of a sparse array is not possible"],"~$slice-count",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",571,"^X",7,"^Y",571,"^Z",18,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the number of slices in an array (array must be 1D or more). The array is sliced\n   in row-major order, i.e. this is the dimension count of the first dimension.","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^45"]]]],["^10",["^42","~$m"]],["^10",["^42",0]]]]]]]]]]]]],"^B","~$clojure.core.matrix/slice-count","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",571,"^Y",571,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the number of slices in an array (array must be 1D or more). The array is sliced\n   in row-major order, i.e. this is the dimension count of the first dimension.","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^45"]]]],["^10",["^42","~$m"]],["^10",["^42",0]]]]]]]]]]]]],"~$outer-product",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1770,"^X",7,"^Y",1770,"^Z",20,"^[",["^10",["^11",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Computes the outer product of numerical arrays.\n\n   The outer product of two arrays with indexed dimensions {i..j} and {j..k} has dimensions {i..j j..k}, i.e. the dimensioanlity will be the\n   sum of the dimensionalities of the two arguments.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]]],"^B","~$clojure.core.matrix/outer-product","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",20,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]],"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null,null]],"^X",1,"^W",1770,"^Y",1770,"^17",2,"^1<",true,"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Computes the outer product of numerical arrays.\n\n   The outer product of two arrays with indexed dimensions {i..j} and {j..k} has dimensions {i..j j..k}, i.e. the dimensioanlity will be the\n   sum of the dimensionalities of the two arguments."],"^?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",59,"^X",7,"^Y",59,"^Z",12,"^[",["^10",["^11",["^10",[["^12"],["^13","^12"]]]]],"^14","Constructs a new n-dimensional array from the given data.\n\n   This function will examine the data in order to construct an array of the appropriate shape.\n\n   The data may be in one of the following forms:\n   - A valid existing array (which will be converted to the implementation)\n   - Nested sequences of scalar values, e.g. Clojure vectors (must have regular shape)\n   - A sequence of slices, each of which must be valid array data\n   - A single scalar value, which will be wrapped or coerced as necessary for the implementation\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation*\n\n   If the implementation does not support the shape or type of data provided, may either\n   create an array using a different implementation on a best-efforts basis or\n   alternatively throw an error. This behaviour is implementation-specific.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/array","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^12"],["^13","^12"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",59,"^Y",59,"^17",2,"^1<",true,"^[",["^10",[["^12"],["^13","^12"]]],"^14","Constructs a new n-dimensional array from the given data.\n\n   This function will examine the data in order to construct an array of the appropriate shape.\n\n   The data may be in one of the following forms:\n   - A valid existing array (which will be converted to the implementation)\n   - Nested sequences of scalar values, e.g. Clojure vectors (must have regular shape)\n   - A sequence of slices, each of which must be valid array data\n   - A single scalar value, which will be wrapped or coerced as necessary for the implementation\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation*\n\n   If the implementation does not support the shape or type of data provided, may either\n   create an array using a different implementation on a best-efforts basis or\n   alternatively throw an error. This behaviour is implementation-specific."],"~$magnitude",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1841,"^X",7,"^Y",1841,"^Z",16,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the euclidean length (magnitude) of a numerical vector"],"^B","~$clojure.core.matrix/magnitude","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1841,"^Y",1841,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the euclidean length (magnitude) of a numerical vector"],"~$slices",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",976,"^X",7,"^Y",976,"^Z",13,"^[",["^10",["^11",["^10",[["~$m"],["~$m","^2A"]]]]],"^14","Gets a sequence of slices of an array. If dimension is supplied, slices along a given dimension,\n   otherwise slices along the first dimension.\n\n   Returns a sequence of scalar values if the array is 1-dimensional.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","^2A"]]],"^[",["^10",[["~$m"],["~$m","^2A"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/slices","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","^2A"]]],"^[",["^10",[["~$m"],["~$m","^2A"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m"],["~$m","^2A"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",976,"^Y",976,"^17",2,"^1<",true,"^[",["^10",[["~$m"],["~$m","^2A"]]],"^14","Gets a sequence of slices of an array. If dimension is supplied, slices along a given dimension,\n   otherwise slices along the first dimension.\n\n   Returns a sequence of scalar values if the array is 1-dimensional."],"~$equals",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1219,"^X",7,"^Y",1219,"^Z",13,"^[",["^10",["^11",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$epsilon"]]]]],"^14","Returns true if two arrays are numerically equal.\n\n   Will return false for arrays of different shapes.\n\n   May either return false or throw an error if the arrays are not numerical.\n\n   If epsilon is provided, performs an equality test\n   with the given maximum tolerance (default is 0.0, i.e. exact numerical equivalence)","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","^:M"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","^:M"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/equals","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","^:M"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","^:M"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","^:M"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",1219,"^Y",1219,"^17",3,"^1<",true,"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","^:M"]]],"^14","Returns true if two arrays are numerically equal.\n\n   Will return false for arrays of different shapes.\n\n   May either return false or throw an error if the arrays are not numerical.\n\n   If epsilon is provided, performs an equality test\n   with the given maximum tolerance (default is 0.0, i.e. exact numerical equivalence)"],"~$row-matrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",209,"^X",7,"^Y",209,"^Z",17,"^[",["^10",["^11",["^10",[["^12"],["^13","^12"]]]]],"^14","Constructs a row matrix with the given data. The returned matrix is a 2D 1xN row matrix.\n\n   The data must be either a valid existing vector or a sequence of scalar values.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/row-matrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^12"],["^13","^12"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",209,"^Y",209,"^17",2,"^1<",true,"^[",["^10",[["^12"],["^13","^12"]]],"^14","Constructs a row matrix with the given data. The returned matrix is a 2D 1xN row matrix.\n\n   The data must be either a valid existing vector or a sequence of scalar values."],"~$esum",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2067,"^X",7,"^Y",2067,"^Z",11,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the sum of all the elements in a numerical array."],"^B","~$clojure.core.matrix/esum","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2067,"^Y",2067,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the sum of all the elements in a numerical array."],"~$round!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the round function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/round!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the round function on all elements of an array, using double precision values. Mutates the array in-place."],"~$symmetric?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",503,"^X",7,"^Y",503,"^Z",17,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a symmetric matrix, i.e. Aij = Aji for all i,j."],"^B","~$clojure.core.matrix/symmetric?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",503,"^Y",503,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a symmetric matrix, i.e. Aij = Aji for all i,j."],"~$asin",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the asin function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/asin","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the asin function on all elements of an array, using double precision values. Returns a new array."],"~$lerp",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1603,"^X",7,"^Y",1603,"^Z",11,"^[",["^10",["^11",["^10",[["~$a","~$b","^20"]]]]],"^14","Performs linear interpolation between two arrays. If factor is 0.0, result will be equal to the first vector.\n   If factor is 1.0, result will be equal to the second vector. Returns a new array."],"^B","~$clojure.core.matrix/lerp","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^18",["^10",[["~$a","~$b","^20"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1603,"^Y",1603,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$a","~$b","^20"]]]]],"^14","Performs linear interpolation between two arrays. If factor is 0.0, result will be equal to the first vector.\n   If factor is 1.0, result will be equal to the second vector. Returns a new array."],"~$select-view",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",891,"^X",7,"^Y",891,"^Z",18,"^[",["^10",["^11",["^10",[["~$a","~$&","^4>"]]]]],"^14","Like `select`, but guarantees a view over the original data.","^15",["^ ","^16",true,"^17",1,"^18",[["^10",["~$a","^4>"]]],"^[",["^10",[["~$a","~$&","^4>"]]],"^19",["^10",[null]]]],"^B","~$clojure.core.matrix/select-view","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^15",["^ ","^16",true,"^17",1,"^18",[["^10",["~$a","^4>"]]],"^[",["^10",[["~$a","~$&","^4>"]]],"^19",["^10",[null]]],"^18",[["^10",["~$a","^4>"]]],"^1;",null,"^19",["^10",[null]],"^X",1,"^W",891,"^Y",891,"^17",1,"^1<",true,"^[",["^10",[["~$a","~$&","^4>"]]],"^14","Like `select`, but guarantees a view over the original data."],"^4C",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1009,"^X",7,"^Y",1009,"^Z",11,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the rows of a matrix, as a sequence of 1D vectors.\n\n   If the array has more than 2 dimensions, will return the rows from all slices in order."],"^B","~$clojure.core.matrix/rows","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1009,"^Y",1009,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the rows of a matrix, as a sequence of 1D vectors.\n\n   If the array has more than 2 dimensions, will return the rows from all slices in order."],"~$matrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",85,"^X",7,"^Y",85,"^Z",13,"^[",["^10",["^11",["^10",[["^12"],["^13","^12"]]]]],"^14","Constructs a new 2-dimensional matrix from the given numerical data.\n\n   The data may be in one of the following forms:\n   - A valid existing numerical array\n   - Nested sequences of scalar values, e.g. Clojure vectors\n   - A sequence of slices, each of which must be valid matrix data\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation*\n\n   `matrix` works as a synonym for `array`","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/matrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^12"],["^13","^12"]]],"^[",["^10",[["^12"],["^13","^12"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^12"],["^13","^12"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",85,"^Y",85,"^17",2,"^1<",true,"^[",["^10",[["^12"],["^13","^12"]]],"^14","Constructs a new 2-dimensional matrix from the given numerical data.\n\n   The data may be in one of the following forms:\n   - A valid existing numerical array\n   - Nested sequences of scalar values, e.g. Clojure vectors\n   - A sequence of slices, each of which must be valid matrix data\n\n   If implementation is not specified, uses the current matrix library as specified\n   in *matrix-implementation*\n\n   `matrix` works as a synonym for `array`"],"~$div",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1468,"^X",7,"^Y",1468,"^Z",10,"^[",["^10",["^11",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Performs element-wise matrix division for numerical arrays.\n\n   Computes the reciprocal of each element when passed a single argument (similar to clojure.core//).","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/div","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",10,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",1468,"^Y",1468,"^17",2,"^1<",true,"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Performs element-wise matrix division for numerical arrays.\n\n   Computes the reciprocal of each element when passed a single argument (similar to clojure.core//)."],"~$mul!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1492,"^X",7,"^Y",1492,"^Z",11,"^[",["^10",["^11",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Performs in-place element-wise multiplication of numerical arrays.\n\n   Returns the first argument after mutation.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/mul!","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$a"],["~$a","~$b"]]],"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",1492,"^Y",1492,"^17",2,"^1<",true,"^[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Performs in-place element-wise multiplication of numerical arrays.\n\n   Returns the first argument after mutation."],"~$signum!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the signum function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/signum!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the signum function on all elements of an array, using double precision values. Mutates the array in-place."],"~$scale-add",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1582,"^X",7,"^Y",1582,"^Z",16,"^[",["^10",["^11",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]]]],"^14","Scales array m1 by factor a, then adds an array m2 scaled by factor b. May optionally add a constant.\n   Broadly equivalent to (add (mul m1 a) (mul m2 b) constant)\n\n   Returns a new array.","^15",["^ ","^16",false,"^17",5,"^18",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^[",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/scale-add","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^15",["^ ","^16",false,"^17",5,"^18",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^[",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1582,"^Y",1582,"^17",5,"^1<",true,"^[",["^10",[["^2S","~$a","^2T","~$b"],["^2S","~$a","^2T","~$b","^:0"]]],"^14","Scales array m1 by factor a, then adds an array m2 scaled by factor b. May optionally add a constant.\n   Broadly equivalent to (add (mul m1 a) (mul m2 b) constant)\n\n   Returns a new array."],"~$add-product",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1565,"^X",7,"^Y",1565,"^Z",18,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b"]]]]],"^14","Adds the element-wise product of two numerical arrays to the first array.\n   Arrays should be the same shape."],"^B","~$clojure.core.matrix/add-product","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^18",["^10",[["~$m","~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1565,"^Y",1565,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b"]]]]],"^14","Adds the element-wise product of two numerical arrays to the first array.\n   Arrays should be the same shape."],"~$round",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the round function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/round","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the round function on all elements of an array, using double precision values. Returns a new array."],"~$normalise-args",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",865,"^X",8,"^Y",865,"^Z",22,"^2Y",true,"^[",["^10",["^11",["^10",[["^4>","~$m"]]]]],"^14","Normalises arguments by mapping :all to the complete range"],"^2Y",true,"^B","~$clojure.core.matrix/normalise-args","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",22,"^18",["^10",[["^4>","~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",865,"^Y",865,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["^4>","~$m"]]]]],"^14","Normalises arguments by mapping :all to the complete range"],"~$normalise",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1726,"^X",7,"^Y",1726,"^Z",16,"^[",["^10",["^11",["^10",[["~$v"]]]]],"^14","Normalises a numerical vector (scales to unit length). Returns a new normalised vector.\n\n   The result is undefined if the initial length of the vector is zero (it is possible the\n   implementation may return NaNs or zeros). If this is a concern, it is recommended to check\n   the length of the vector first in order to handle this as a special case."],"^B","~$clojure.core.matrix/normalise","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$v"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1726,"^Y",1726,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$v"]]]]],"^14","Normalises a numerical vector (scales to unit length). Returns a new normalised vector.\n\n   The result is undefined if the initial length of the vector is zero (it is possible the\n   implementation may return NaNs or zeros). If this is a concern, it is recommended to check\n   the length of the vector first in order to handle this as a special case."],"~$emap",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2031,"^X",7,"^Y",2031,"^Z",11,"^[",["^10",["^11",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]]]],"^14","Element-wise map over all elements of one or more arrays.\n\n   f must return a result compatible with the element-type of the array m\n\n   Returns a new array of the same element-type and shape as the array m.","^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/emap","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",2031,"^Y",2031,"^17",3,"^1<",true,"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^14","Element-wise map over all elements of one or more arrays.\n\n   f must return a result compatible with the element-type of the array m\n\n   Returns a new array of the same element-type and shape as the array m."],"~$acos!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the acos function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/acos!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the acos function on all elements of an array, using double precision values. Mutates the array in-place."],"~$select-indices",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",901,"^X",7,"^Y",901,"^Z",21,"^[",["^10",["^11",["^10",[["~$a","^3I"]]]]],"^14","Returns a one-dimensional array of the elements which are at the specified\n   indices. An index is a one-dimensional array which element-count matches the\n   dimensionality of a. Examples:\n   (select-indices [[1 2] [3 4]] [[0 0][1 1]]) ;=> [1 4]"],"^B","~$clojure.core.matrix/select-indices","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",21,"^18",["^10",[["~$a","^3I"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",901,"^Y",901,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$a","^3I"]]]]],"^14","Returns a one-dimensional array of the elements which are at the specified\n   indices. An index is a one-dimensional array which element-count matches the\n   dimensionality of a. Examples:\n   (select-indices [[1 2] [3 4]] [[0 0][1 1]]) ;=> [1 4]"],"~$assign!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",405,"^X",7,"^Y",405,"^Z",14,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Assigns a new value to an array. Sets the values of the target element-wise, broadcasting where necessary.\n   Returns the mutated array. The new value may be either a scalar or a array of compatible (maybe smaller) shape."],"^B","~$clojure.core.matrix/assign!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",405,"^Y",405,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Assigns a new value to an array. Sets the values of the target element-wise, broadcasting where necessary.\n   Returns the mutated array. The new value may be either a scalar or a array of compatible (maybe smaller) shape."],"~$get-row",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",819,"^X",7,"^Y",819,"^Z",14,"^[",["^10",["^11",["^10",[["~$m","~$x"]]]]],"^14","Gets a row of a matrix, as a 1D vector.\n\n   The format of the returned 1D vector is determined by the implementation of the source matrix. \n   get-row may return a lightweight mutable view if supported by the implementation."],"^B","~$clojure.core.matrix/get-row","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m","~$x"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",819,"^Y",819,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$x"]]]]],"^14","Gets a row of a matrix, as a 1D vector.\n\n   The format of the returned 1D vector is determined by the implementation of the source matrix. \n   get-row may return a lightweight mutable view if supported by the implementation."],"~$mul",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1423,"^X",7,"^Y",1423,"^Z",10,"^[",["^10",["^11",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]]]],"^14","Performs element-wise multiplication with scalars and numerical arrays.\n\n   Behaves like clojure.core/* for scalar values.","^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]]],"^B","~$clojure.core.matrix/mul","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",10,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]],"^18",["^10",[[],["~$a"],["~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null,null,null]],"^X",1,"^W",1423,"^Y",1423,"^17",2,"^1<",true,"^[",["^10",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^1@"]]],"^14","Performs element-wise multiplication with scalars and numerical arrays.\n\n   Behaves like clojure.core/* for scalar values."],"~$sinh!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sinh function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/sinh!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sinh function on all elements of an array, using double precision values. Mutates the array in-place."],"~$native",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",357,"^X",7,"^Y",357,"^Z",13,"^[",["^10",["^11",["^10",[["~$a"],["~$impl","~$a"]]]]],"^14","Coerces an array into a native format array if possible. Native arrays may offer\n   superior performance for some operations, depending on the implementation.\n   Returns nil if no appropriate native format exists.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$a"],["^;S","~$a"]]],"^[",["^10",[["~$a"],["^;S","~$a"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/native","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$a"],["^;S","~$a"]]],"^[",["^10",[["~$a"],["^;S","~$a"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$a"],["^;S","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",357,"^Y",357,"^17",2,"^1<",true,"^[",["^10",[["~$a"],["^;S","~$a"]]],"^14","Coerces an array into a native format array if possible. Native arrays may offer\n   superior performance for some operations, depending on the implementation.\n   Returns nil if no appropriate native format exists."],"~$logistic!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1912,"^X",7,"^Y",1912,"^Z",16,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the sigmoid (logistic) function for every element of an array. Mutates the array."],"^B","~$clojure.core.matrix/logistic!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1912,"^Y",1912,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the sigmoid (logistic) function for every element of an array. Mutates the array."],"~$eif",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1250,"^X",7,"^Y",1250,"^Z",10,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b"]]]]],"^14","Element-wise if. Tranverses each element, x, of an array, m. If x > 0,\n  returns a (if a is a scalar) or the corresponding element from a (if a is an\n  array or matrix). If x <= 0, returns b (if b is a scalar) or the corresponding\n  element from array b (if b is an array or matrix).\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (eif (lt 1 3) 3 6) ;=> 3\n  (eif (lt 5 3) 3 6) ;=> 6\n  (eif (eq A B) 1 2) ;=> [[1 2] [2 1]]\n  (eif (eq A B) 1 D) ;=> [[1 1] [9 1]]\n  (eif (eq A B) C 2) ;=> [[2 2] [2 2]]\n  (eif [[1 0][0 1] [[2 3][4 5]] [[6 7][8 9]]) ;=> [[2 7][8 5]]\n  (eif (gt [[2 6][3 5]] 4) [[0 0][0 0]] [[1 1][1 1]] ;=> [[0 1][0 1]]"],"^B","~$clojure.core.matrix/eif","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",10,"^18",["^10",[["~$m","~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1250,"^Y",1250,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a","~$b"]]]]],"^14","Element-wise if. Tranverses each element, x, of an array, m. If x > 0,\n  returns a (if a is a scalar) or the corresponding element from a (if a is an\n  array or matrix). If x <= 0, returns b (if b is a scalar) or the corresponding\n  element from array b (if b is an array or matrix).\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (eif (lt 1 3) 3 6) ;=> 3\n  (eif (lt 5 3) 3 6) ;=> 6\n  (eif (eq A B) 1 2) ;=> [[1 2] [2 1]]\n  (eif (eq A B) 1 D) ;=> [[1 1] [9 1]]\n  (eif (eq A B) C 2) ;=> [[2 2] [2 2]]\n  (eif [[1 0][0 1] [[2 3][4 5]] [[6 7][8 9]]) ;=> [[2 7][8 5]]\n  (eif (gt [[2 6][3 5]] 4) [[0 0][0 0]] [[1 1][1 1]] ;=> [[0 1][0 1]]"],"~$row-matrix?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",597,"^X",7,"^Y",597,"^Z",18,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if a matrix is a row-matrix (i.e. is 2D and has exactly one row)"],"^B","~$clojure.core.matrix/row-matrix?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",597,"^Y",597,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if a matrix is a row-matrix (i.e. is 2D and has exactly one row)"],"~$assign",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",422,"^X",7,"^Y",422,"^Z",13,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Assigns array a element-wise, broadcasting to fill the whole shape of m.\n   Returns a new matrix, of the same shape as the original m."],"^B","~$clojure.core.matrix/assign","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^18",["^10",[["~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",422,"^Y",422,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Assigns array a element-wise, broadcasting to fill the whole shape of m.\n   Returns a new matrix, of the same shape as the original m."],"~$tanh!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the tanh function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/tanh!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the tanh function on all elements of an array, using double precision values. Mutates the array in-place."],"~$main-diagonal",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1023,"^X",7,"^Y",1023,"^Z",20,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the main diagonal of a matrix or general array, as a vector.\n   The main diagonal of a general array is defined as those elements where the all the\n   indexes are equal, i.e. the index is of the form [i i ... i]\n   Works on both square and rectangular matrices."],"^B","~$clojure.core.matrix/main-diagonal","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",20,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1023,"^Y",1023,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the main diagonal of a matrix or general array, as a vector.\n   The main diagonal of a general array is defined as those elements where the all the\n   indexes are equal, i.e. the index is of the form [i i ... i]\n   Works on both square and rectangular matrices."],"~$cross!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1789,"^X",7,"^Y",1789,"^Z",13,"^[",["^10",["^11",["^10",[["~$a","~$b"],["~$dest","~$a","~$b"]]]]],"^14","Computes the cross-product of two numerical 3D vectors a and b, storing the result in the first vector.\n\n   Returns the (mutated) first vector.","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$a","~$b"],["^<6","~$a","~$b"]]],"^[",["^10",[["~$a","~$b"],["^<6","~$a","~$b"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/cross!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$a","~$b"],["^<6","~$a","~$b"]]],"^[",["^10",[["~$a","~$b"],["^<6","~$a","~$b"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$a","~$b"],["^<6","~$a","~$b"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1789,"^Y",1789,"^17",3,"^1<",true,"^[",["^10",[["~$a","~$b"],["^<6","~$a","~$b"]]],"^14","Computes the cross-product of two numerical 3D vectors a and b, storing the result in the first vector.\n\n   Returns the (mutated) first vector."],"~$abs",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the abs function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/abs","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the abs function on all elements of an array, using double precision values. Returns a new array."],"~$new-sparse-array",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",183,"^X",7,"^Y",183,"^Z",23,"^[",["^10",["^11",["^10",[["^5<"],["^13","^5<"]]]]],"^14","Creates a new sparse array with the given shape.\n   New array will contain default values as defined by the implementation (usually zero).\n   If the implementation supports mutable sparse matrices, then the new matrix should be fully mutable.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5<"],["^13","^5<"]]],"^[",["^10",[["^5<"],["^13","^5<"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/new-sparse-array","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",23,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5<"],["^13","^5<"]]],"^[",["^10",[["^5<"],["^13","^5<"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^5<"],["^13","^5<"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",183,"^Y",183,"^17",2,"^1<",true,"^[",["^10",[["^5<"],["^13","^5<"]]],"^14","Creates a new sparse array with the given shape.\n   New array will contain default values as defined by the implementation (usually zero).\n   If the implementation supports mutable sparse matrices, then the new matrix should be fully mutable."],"~$sinh",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sinh function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/sinh","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sinh function on all elements of an array, using double precision values. Returns a new array."],"~$to-nested-vectors",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",444,"^X",7,"^Y",444,"^Z",24,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Converts an array to an idiomatic, immutable nested Clojure vector format. The bottom level of the\n   nested vectors will contain the element values. Higher levels will all implement IPersistentVector.\n\n   The depth of nesting will be equal to the dimensionality of the array."],"^B","~$clojure.core.matrix/to-nested-vectors","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",24,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",444,"^Y",444,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Converts an array to an idiomatic, immutable nested Clojure vector format. The bottom level of the\n   nested vectors will contain the element values. Higher levels will all implement IPersistentVector.\n\n   The depth of nesting will be equal to the dimensionality of the array."],"~$scalar",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",452,"^X",7,"^Y",452,"^Z",13,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Coerces m to a scalar value. Result is guaranteed not to be an array.\n   Will throw an exception if m is not zero-dimensional.","^3Y",["^10",["^3Z",["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^5J"]]]],["^10",["^42","~$m"]]]]]]]]]]],"^B","~$clojure.core.matrix/scalar","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",452,"^Y",452,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Coerces m to a scalar value. Result is guaranteed not to be an array.\n   Will throw an exception if m is not zero-dimensional.","^3Y",["^10",["^3Z",["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^5J"]]]],["^10",["^42","~$m"]]]]]]]]]]],"^5A",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1403,"^X",7,"^Y",1403,"^Z",12,"^[",["^10",["^11",["^10",[["~$m","^3X","~$i"]]]]],"^14","Returns a label for the specified position along a given array dimension. Returns nil if the dimension is unlabelled."],"^B","~$clojure.core.matrix/label","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^18",["^10",[["~$m","^3X","~$i"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1403,"^Y",1403,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^3X","~$i"]]]]],"^14","Returns a label for the specified position along a given array dimension. Returns nil if the dimension is unlabelled."],"~$class",["^ ","^B","~$clojure.core.matrix/class","^V","resources/public/js/clojure/core/matrix.cljc","^W",46,"^X",7,"^Y",46,"^Z",17,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",46,"^X",12,"^Y",46,"^Z",17]],"~$implementation-check",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2163,"^X",8,"^Y",2163,"^Z",28,"^2Y",true,"^[",["^10",["^11",["^10",[[],["^;S"]]]]],"^14","Gets a canonical matrix object for a given implementation (keyword or array), or the current implementation\n   if not otherwise specified. Scalars are regarded as conforming to the current implementation\n   Throws an exception if none is available.","^15",["^ ","^16",false,"^17",1,"^18",["^10",[[],["^;S"]]],"^[",["^10",[[],["^;S"]]],"^19",["^10",[null,null]]]],"^2Y",true,"^B","~$clojure.core.matrix/implementation-check","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",28,"^15",["^ ","^16",false,"^17",1,"^18",["^10",[[],["^;S"]]],"^[",["^10",[[],["^;S"]]],"^19",["^10",[null,null]]],"^18",["^10",[[],["^;S"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2163,"^Y",2163,"^17",1,"^1<",true,"^[",["^10",[[],["^;S"]]],"^14","Gets a canonical matrix object for a given implementation (keyword or array), or the current implementation\n   if not otherwise specified. Scalars are regarded as conforming to the current implementation\n   Throws an exception if none is available."],"~$broadcast-coerce",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1162,"^X",7,"^Y",1162,"^Z",23,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Broadcasts and coerces the second matrix to the shape and type of the first.\n   Equivalent to (coerce m (broadcast-like m a)).","^3Y",["^10",["^3Z",["^10",[["~$m","~$a"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/broadcast-coerce"]]]],["^10",["^42","~$m"]],["^10",["^42","~$a"]]]]]]]]]]]]],"^B","~$clojure.core.matrix/broadcast-coerce","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",23,"^18",["^10",[["~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1162,"^Y",1162,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$a"]]]]],"^14","Broadcasts and coerces the second matrix to the shape and type of the first.\n   Equivalent to (coerce m (broadcast-like m a)).","^3Y",["^10",["^3Z",["^10",[["~$m","~$a"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^<H"]]]],["^10",["^42","~$m"]],["^10",["^42","~$a"]]]]]]]]]]]]],"~$same-shape?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",676,"^X",7,"^Y",676,"^Z",18,"^[",["^10",["^11",["^10",[[],["~$m"],["~$m","~$n"],["~$m","~$n","~$&","^1@"]]]]],"^14","Returns true if the arrays have the same shape, false otherwise","^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$m"],["~$m","~$n"]]],"^[",["^10",[[],["~$m"],["~$m","~$n"],["~$m","~$n","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]]],"^B","~$clojure.core.matrix/same-shape?","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[[],["~$m"],["~$m","~$n"]]],"^[",["^10",[[],["~$m"],["~$m","~$n"],["~$m","~$n","~$&","^1@"]]],"^19",["^10",[null,null,null,null]]],"^18",["^10",[[],["~$m"],["~$m","~$n"]]],"^1;",null,"^19",["^10",[null,null,null,null]],"^X",1,"^W",676,"^Y",676,"^17",2,"^1<",true,"^[",["^10",[[],["~$m"],["~$m","~$n"],["~$m","~$n","~$&","^1@"]]],"^14","Returns true if the arrays have the same shape, false otherwise"],"^@",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",462,"^X",7,"^Y",462,"^Z",13,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a valid core.matrix N-dimensional array, for any N>=0.","^3Y",["^10",["^3Z",["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$cljs.core/not"]]]],["^10",["^42",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/is-scalar?"]]]],["^10",["^42","~$m"]]]]]]]]]]]]]]]]]]],"^B","~$clojure.core.matrix/array?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",462,"^Y",462,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter is a valid core.matrix N-dimensional array, for any N>=0.","^3Y",["^10",["^3Z",["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^<L"]]]],["^10",["^42",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^<M"]]]],["^10",["^42","~$m"]]]]]]]]]]]]]]]]]]],"~$gt",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1307,"^X",7,"^Y",1307,"^Z",9,"^[",["^10",["^11",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]]]],"^14","Element-wise greater-than comparison operation. Returns a binary array where\n  elements greater-than the argument are represented by 1 and elements less-\n  than or equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (gt 4 3) ;=> 1\n  (gt 3 3) ;=> 0\n  (gt [[1 5] [3 6]] 3) ;=> [[0 1] [0 1]]\n  (gt [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 1] [0 0]]","^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","~$a"]]],"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/gt","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",9,"^15",["^ ","^16",true,"^17",2,"^18",["^10",[["~$m","~$a"]]],"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1307,"^Y",1307,"^17",2,"^1<",true,"^[",["^10",[["~$m","~$a"],["~$m","~$a","~$&","^1@"]]],"^14","Element-wise greater-than comparison operation. Returns a binary array where\n  elements greater-than the argument are represented by 1 and elements less-\n  than or equal to the argument are 0.\n\n  Performs broadcasting of arguments if required to match the size of the largest array.\n\n  Examples:\n  (gt 4 3) ;=> 1\n  (gt 3 3) ;=> 0\n  (gt [[1 5] [3 6]] 3) ;=> [[0 1] [0 1]]\n  (gt [[1 5] [4 6]] [[2 3] [5 6]]) ;=> [[0 1] [0 0]]"],"^A",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",428,"^X",7,"^Y",428,"^Z",12,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Constructs a (shallow) clone of the array. This function is intended to\n   allow safe defensive usage of matrices / vectors. If the intent is to create a mutable clone of\n   some array data, it is recommended to use mutable instead.\n\n   Guarantees that:\n   1. Mutating the returned array will not modify any other array (defensive copy)\n   2. The returned array will be fully mutable, if the implementation supports mutable matrices.\n\n   The clone may or may not be of the same implementation: implementations are encouraged to do so but\n   this is not mandatory.\n\n   A core.matrix implementation which only provides immutable arrays may safely return the same array."],"^B","~$clojure.core.matrix/clone","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",428,"^Y",428,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Constructs a (shallow) clone of the array. This function is intended to\n   allow safe defensive usage of matrices / vectors. If the intent is to create a mutable clone of\n   some array data, it is recommended to use mutable instead.\n\n   Guarantees that:\n   1. Mutating the returned array will not modify any other array (defensive copy)\n   2. The returned array will be fully mutable, if the implementation supports mutable matrices.\n\n   The clone may or may not be of the same implementation: implementations are encouraged to do so but\n   this is not mandatory.\n\n   A core.matrix implementation which only provides immutable arrays may safely return the same array."],"~$to-object-array",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",716,"^X",7,"^Y",716,"^Z",22,"^[",["^10",["^11",["^10",[["~$m"],["~$m","~$want-copy?"]]]]],"^14","Returns a Java Object[] array containing the values of an array m in row-major order.\n\n    If want-copy? is true, will guarantee a new Object array (defensive copy).\n    If want-copy? is false, will return the internal array used by m, or nil if not supported\n    by the implementation.\n    If want-copy? is not specified, will return either a copy or the internal array","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","^<S"]]],"^[",["^10",[["~$m"],["~$m","^<S"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/to-object-array","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",22,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","^<S"]]],"^[",["^10",[["~$m"],["~$m","^<S"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m"],["~$m","^<S"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",716,"^Y",716,"^17",2,"^1<",true,"^[",["^10",[["~$m"],["~$m","^<S"]]],"^14","Returns a Java Object[] array containing the values of an array m in row-major order.\n\n    If want-copy? is true, will guarantee a new Object array (defensive copy).\n    If want-copy? is false, will return the internal array used by m, or nil if not supported\n    by the implementation.\n    If want-copy? is not specified, will return either a copy or the internal array"],"~$row-count",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",559,"^X",7,"^Y",559,"^Z",16,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the number of rows in a matrix or vector (array must be 1D or more).","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^45"]]]],["^10",["^42","~$m"]],["^10",["^42",0]]]]]]]]]]]]],"^B","~$clojure.core.matrix/row-count","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",559,"^Y",559,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the number of rows in a matrix or vector (array must be 1D or more).","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^45"]]]],["^10",["^42","~$m"]],["^10",["^42",0]]]]]]]]]]]]],"~$slice",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",962,"^X",7,"^Y",962,"^Z",12,"^[",["^10",["^11",["^10",[["~$m","^6T"],["~$m","^2A","^6T"]]]]],"^14","Gets a slice of an array along a specific dimension.\n   \n   The returned array will have one less dimension, i.e. slicing a matrix will return a vector\n   and slicing a 1D vector will return a scalar.\n\n   Slicing on the first dimension (dimension 0) is likely to perform better\n   for many array implementations. This is the default if no\n   dimension is specified.","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","^6T"],["~$m","^2A","^6T"]]],"^[",["^10",[["~$m","^6T"],["~$m","^2A","^6T"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/slice","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","^6T"],["~$m","^2A","^6T"]]],"^[",["^10",[["~$m","^6T"],["~$m","^2A","^6T"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","^6T"],["~$m","^2A","^6T"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",962,"^Y",962,"^17",3,"^1<",true,"^[",["^10",[["~$m","^6T"],["~$m","^2A","^6T"]]],"^14","Gets a slice of an array along a specific dimension.\n   \n   The returned array will have one less dimension, i.e. slicing a matrix will return a vector\n   and slicing a 1D vector will return a scalar.\n\n   Slicing on the first dimension (dimension 0) is likely to perform better\n   for many array implementations. This is the default if no\n   dimension is specified."],"~$permutation-matrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",238,"^X",7,"^Y",238,"^Z",25,"^[",["^10",["^11",["^10",[["~$permutation"],["^13","^<Z"]]]]],"^14","Constructs a permutation matrix for a given permutation vector. The permutation vector should\n   contain a distinct set of integers 0...n-1, representing the re-ordering performed by\n   the permutation matrix.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^<Z"],["^13","^<Z"]]],"^[",["^10",[["^<Z"],["^13","^<Z"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/permutation-matrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",25,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^<Z"],["^13","^<Z"]]],"^[",["^10",[["^<Z"],["^13","^<Z"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^<Z"],["^13","^<Z"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",238,"^Y",238,"^17",2,"^1<",true,"^[",["^10",[["^<Z"],["^13","^<Z"]]],"^14","Constructs a permutation matrix for a given permutation vector. The permutation vector should\n   contain a distinct set of integers 0...n-1, representing the re-ordering performed by\n   the permutation matrix."],"~$floor!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the floor function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/floor!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the floor function on all elements of an array, using double precision values. Mutates the array in-place."],"~$new-array",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",171,"^X",7,"^Y",171,"^Z",16,"^[",["^10",["^11",["^10",[["^5<"],["^13","^5<"]]]]],"^14","Creates a new array with the given shape.\n   New array will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable matrices, then the new matrix will be fully mutable.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5<"],["^13","^5<"]]],"^[",["^10",[["^5<"],["^13","^5<"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/new-array","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5<"],["^13","^5<"]]],"^[",["^10",[["^5<"],["^13","^5<"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^5<"],["^13","^5<"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",171,"^Y",171,"^17",2,"^1<",true,"^[",["^10",[["^5<"],["^13","^5<"]]],"^14","Creates a new array with the given shape.\n   New array will contain default values as defined by the implementation (usually null or zero).\n   If the implementation supports mutable matrices, then the new matrix will be fully mutable."],"~$square",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1721,"^X",7,"^Y",1721,"^Z",13,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Squares every element of a numerical array. Returns a new array."],"^B","~$clojure.core.matrix/square","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1721,"^Y",1721,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Squares every element of a numerical array. Returns a new array."],"~$compute-matrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",299,"^X",7,"^Y",299,"^Z",21,"^[",["^10",["^11",["^10",[["^5<","~$f"],["^13","^5<","~$f"]]]]],"^14","Creates a array with the specified shape, and each element specified by (f i j k...)\n   Where i, j, k... are the index positions of each element in the matrix","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["^5<","~$f"],["^13","^5<","~$f"]]],"^[",["^10",[["^5<","~$f"],["^13","^5<","~$f"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/compute-matrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",21,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["^5<","~$f"],["^13","^5<","~$f"]]],"^[",["^10",[["^5<","~$f"],["^13","^5<","~$f"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^5<","~$f"],["^13","^5<","~$f"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",299,"^Y",299,"^17",3,"^1<",true,"^[",["^10",[["^5<","~$f"],["^13","^5<","~$f"]]],"^14","Creates a array with the specified shape, and each element specified by (f i j k...)\n   Where i, j, k... are the index positions of each element in the matrix"],"~$minimum",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2082,"^X",7,"^Y",2082,"^Z",14,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the minimum element value from a numerical array"],"^B","~$clojure.core.matrix/minimum","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2082,"^Y",2082,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Gets the minimum element value from a numerical array"],"^5D",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1851,"^X",27,"^Y",1851,"^Z",33,"^6W",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","DEPRECATED: please use magnitude instead."],"^B","~$clojure.core.matrix/length","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",33,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1851,"^6W",true,"^Y",1851,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","DEPRECATED: please use magnitude instead."],"~$current-implementation",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2158,"^X",7,"^Y",2158,"^Z",29,"^[",["^10",["^11",["^10",[[]]]]],"^14","Gets the currently active matrix implementation as a keyword, e.g. :vectorz"],"^B","~$clojure.core.matrix/current-implementation","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",29,"^18",["^10",[[]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",2158,"^Y",2158,"^17",0,"^1<",true,"^[",["^10",["^11",["^10",[[]]]]],"^14","Gets the currently active matrix implementation as a keyword, e.g. :vectorz"],"~$sin",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sin function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/sin","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the sin function on all elements of an array, using double precision values. Returns a new array."],"~$zero-matrix",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",144,"^X",7,"^Y",144,"^Z",18,"^[",["^10",["^11",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]]]],"^14","Constructs a new zero-filled numerical matrix with the given dimensions.\n\n   May produce a lightweight immutable zero matrix if supported by the implementation.","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^[",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/zero-matrix","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",18,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^[",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",144,"^Y",144,"^17",3,"^1<",true,"^[",["^10",[["^4C","^4D"],["^13","^4C","^4D"]]],"^14","Constructs a new zero-filled numerical matrix with the given dimensions.\n\n   May produce a lightweight immutable zero matrix if supported by the implementation."],"~$relu",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1929,"^X",7,"^Y",1929,"^Z",11,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the ReLU (rectified linear) function for every element of an array."],"^B","~$clojure.core.matrix/relu","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",11,"^18",["^10",[["~$a"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1929,"^Y",1929,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^14","Computes the ReLU (rectified linear) function for every element of an array."],"~$set-column",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1984,"^X",7,"^Y",1984,"^Z",17,"^[",["^10",["^11",["^10",[["~$m","~$i","^80"]]]]],"^14","Sets a column in a matrix using a specified vector."],"^B","~$clojure.core.matrix/set-column","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^18",["^10",[["~$m","~$i","^80"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1984,"^Y",1984,"^17",3,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","~$i","^80"]]]]],"^14","Sets a column in a matrix using a specified vector."],"~$immutable",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",270,"^X",7,"^Y",270,"^Z",16,"^[",["^10",["^11",["^10",[["^12"]]]]],"^14","Returns an immutable array containing the given array data.\n\n   May return the same array if it is already immutable.\n\n   If the implementation does not support immutable matrices, will return an immutable array\n   from another core.matrix implementation that supports either the same element type or a broader type."],"^B","~$clojure.core.matrix/immutable","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",16,"^18",["^10",[["^12"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",270,"^Y",270,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["^12"]]]]],"^14","Returns an immutable array containing the given array data.\n\n   May return the same array if it is already immutable.\n\n   If the implementation does not support immutable matrices, will return an immutable array\n   from another core.matrix implementation that supports either the same element type or a broader type."],"~$reshape",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1188,"^X",7,"^Y",1188,"^Z",14,"^[",["^10",["^11",["^10",[["~$m","^5<"]]]]],"^14","Changes the shape of a matrix to the specified new shape. shape can be any sequence of dimension sizes.\n\n   Preserves the row-major order of matrix elements. Truncates the sequence of elements if the shape is smaller\n   than the original shape.\n\n   Pads with default values (dependent on implementation - normally zero) if the shape is larger."],"^B","~$clojure.core.matrix/reshape","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$m","^5<"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1188,"^Y",1188,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$m","^5<"]]]]],"^14","Changes the shape of a matrix to the specified new shape. shape can be any sequence of dimension sizes.\n\n   Preserves the row-major order of matrix elements. Truncates the sequence of elements if the shape is smaller\n   than the original shape.\n\n   Pads with default values (dependent on implementation - normally zero) if the shape is larger."],"^5<",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",622,"^X",7,"^Y",622,"^Z",12,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the shape of an array, i.e. the dimension sizes for all dimensions.\n\n   The result will be a vector containing only integer index values, with a count\n   equal to the dimensionality of the array.\n\n   Returns nil the if object is not an array (i.e. is a scalar value)","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$cljs.core/if-let"]]]],["^10",["^42",["^10",["~$clojure.core/vec",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^1M"]]]],["^10",["^42",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/get-shape"]]]],["^10",["^42","~$m"]]]]]]]]]]]]]]]]]]]],["^10",["^42",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$cljs.core/vec"]]]],["^10",["^42",["^10",["^11","^1M"]]]]]]]]]]]],["^10",["^42",null]]]]]]]]]]]]],"^B","~$clojure.core.matrix/shape","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",622,"^Y",622,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the shape of an array, i.e. the dimension sizes for all dimensions.\n\n   The result will be a vector containing only integer index values, with a count\n   equal to the dimensionality of the array.\n\n   Returns nil the if object is not an array (i.e. is a scalar value)","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^=I"]]]],["^10",["^42",["^10",["^=J",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^1M"]]]],["^10",["^42",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^=K"]]]],["^10",["^42","~$m"]]]]]]]]]]]]]]]]]]]],["^10",["^42",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^=L"]]]],["^10",["^42",["^10",["^11","^1M"]]]]]]]]]]]],["^10",["^42",null]]]]]]]]]]]]],"~$transform!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1528,"^X",7,"^Y",1528,"^Z",17,"^[",["^10",["^11",["^10",[["~$t","~$v"]]]]],"^14","Transforms a given vector in place. This is a mutable equivalent to `transform`.\n\n   Returns the transformed vector.\n\n   The transformation must map an n-dimensional vector to another n-dimensional vector, i.e.\n   if it is a 2D matrix then it must have shape [n x n]."],"^B","~$clojure.core.matrix/transform!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^18",["^10",[["~$t","~$v"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1528,"^Y",1528,"^17",2,"^1<",true,"^[",["^10",["^11",["^10",[["~$t","~$v"]]]]],"^14","Transforms a given vector in place. This is a mutable equivalent to `transform`.\n\n   Returns the transformed vector.\n\n   The transformation must map an n-dimensional vector to another n-dimensional vector, i.e.\n   if it is a 2D matrix then it must have shape [n x n]."],"~$scalar?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",478,"^X",7,"^Y",478,"^Z",14,"^[",["^10",["^11",["^10",[["~$v"]]]]],"^14","Returns true if the parameter is a scalar value (i.e. acceptable as matrix element value).\n   A 0-d array containing a scalar is *not* itself a scalar value.","^3Y",["^10",["^3Z",["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^<M"]]]],["^10",["^42","~$m"]]]]]]]]]]],"^B","~$clojure.core.matrix/scalar?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",14,"^18",["^10",[["~$v"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",478,"^Y",478,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$v"]]]]],"^14","Returns true if the parameter is a scalar value (i.e. acceptable as matrix element value).\n   A 0-d array containing a scalar is *not* itself a scalar value.","^3Y",["^10",["^3Z",["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^<M"]]]],["^10",["^42","~$m"]]]]]]]]]]],"~$zero-dimensional?",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",485,"^X",7,"^Y",485,"^Z",24,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter has zero dimensions. i.e. it is a 0-d array or a scalar value.\n\n   Behaviour is the same as `scalar?`, except that true is returned for 0-dimensional arrays."],"^B","~$clojure.core.matrix/zero-dimensional?","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",24,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",485,"^Y",485,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns true if the parameter has zero dimensions. i.e. it is a 0-d array or a scalar value.\n\n   Behaviour is the same as `scalar?`, except that true is returned for 0-dimensional arrays."],"~$dimensionality",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",545,"^X",7,"^Y",545,"^Z",21,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the dimensionality of an array. The dimensionality is equal to\n   the number of dimensions in the array's shape.","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^43"]]]],["^10",["^42",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","~$clojure.core.matrix.protocols/dimensionality"]]]],["^10",["^42","~$m"]]]]]]]]]]]]]]]]]]]]],"^B","~$clojure.core.matrix/dimensionality","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",21,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",545,"^Y",545,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the dimensionality of an array. The dimensionality is equal to\n   the number of dimensions in the array's shape.","^3Y",["^10",["^3Z",["^10",[["~$m"],["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^43"]]]],["^10",["^42",["^10",["^3[",["^10",["^40",["^10",["^41",["^10",["^42",["^10",["^11","^=U"]]]],["^10",["^42","~$m"]]]]]]]]]]]]]]]]]]]]],"~$rotate",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1096,"^X",7,"^Y",1096,"^Z",13,"^[",["^10",["^11",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]]]],"^14","Rotates an array along specified dimensions.\n\n   Elements rotated off will re-appear at the other side. The shape of the array will not be modified.","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^[",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/rotate","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^[",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1096,"^Y",1096,"^17",3,"^1<",true,"^[",["^10",[["~$m","^2A","^4G"],["~$m","^4H"]]],"^14","Rotates an array along specified dimensions.\n\n   Elements rotated off will re-appear at the other side. The shape of the array will not be modified."],"~$signum",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the signum function on all elements of an array, using double precision values. Returns a new array.","^V",null],"^B","~$clojure.core.matrix/signum","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the signum function on all elements of an array, using double precision values. Returns a new array."],"~$magnitude-squared",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1846,"^X",7,"^Y",1846,"^Z",24,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the squared length (squared magnitude) of a numerical vector"],"^B","~$clojure.core.matrix/magnitude-squared","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",24,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1846,"^Y",1846,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Calculates the squared length (squared magnitude) of a numerical vector"],"~$log10!",["^ ","^T",null,"^U",["^ ","^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the log10 function on all elements of an array, using double precision values. Mutates the array in-place.","^V",null],"^B","~$clojure.core.matrix/log10!","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1905,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Computes the log10 function on all elements of an array, using double precision values. Mutates the array in-place."],"~$to-double-array",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",700,"^X",7,"^Y",700,"^Z",22,"^[",["^10",["^11",["^10",[["~$m"],["~$m","^<S"]]]]],"^14","Returns a Java double[] array containing the values of a numerical array m in row-major order. Will\n    throw an error if any of the array elements cannot be converted to doubles.\n\n    If want-copy? is true, will guarantee a new double array (defensive copy).\n    If want-copy? is false, will return the internal array used by m, or nil if not supported\n    by the implementation.\n    If want-copy? is not specified, will return either a copy or the internal array","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","^<S"]]],"^[",["^10",[["~$m"],["~$m","^<S"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/to-double-array","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",22,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["~$m"],["~$m","^<S"]]],"^[",["^10",[["~$m"],["~$m","^<S"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m"],["~$m","^<S"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",700,"^Y",700,"^17",2,"^1<",true,"^[",["^10",[["~$m"],["~$m","^<S"]]],"^14","Returns a Java double[] array containing the values of a numerical array m in row-major order. Will\n    throw an error if any of the array elements cannot be converted to doubles.\n\n    If want-copy? is true, will guarantee a new double array (defensive copy).\n    If want-copy? is false, will return the internal array used by m, or nil if not supported\n    by the implementation.\n    If want-copy? is not specified, will return either a copy or the internal array"],"~$element-type",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",539,"^X",7,"^Y",539,"^Z",19,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the class of elements that can be in the array. For example, a numerical array may return\n   the class java.lang.Double."],"^B","~$clojure.core.matrix/element-type","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",19,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",539,"^Y",539,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Returns the class of elements that can be in the array. For example, a numerical array may return\n   the class java.lang.Double."],"~$non-zero-count",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1999,"^X",7,"^Y",1999,"^Z",21,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Counts the number of non-zero values in a numerical array.\n   May perform a full array scan, but will often be quicker for specialised\n   sparse arrays - sometimes as fast as O(1)"],"^B","~$clojure.core.matrix/non-zero-count","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",21,"^18",["^10",[["~$m"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1999,"^Y",1999,"^17",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$m"]]]]],"^14","Counts the number of non-zero values in a numerical array.\n   May perform a full array scan, but will often be quicker for specialised\n   sparse arrays - sometimes as fast as O(1)"],"~$emap-indexed!",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",2115,"^X",7,"^Y",2115,"^Z",20,"^[",["^10",["^11",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]]]],"^14","Element-wise map-indexed over all elements of one or more arrays.\n\n   f must accept as first argument the index vector of the current element,\n   and return a result compatible with the element-type of the array m\n\n   Performs in-place modification of the first array argument.","^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null,null]]]],"^B","~$clojure.core.matrix/emap-indexed!","^16",true,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",20,"^15",["^ ","^16",true,"^17",3,"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^19",["^10",[null,null,null]]],"^18",["^10",[["~$f","~$m"],["~$f","~$m","~$a"]]],"^1;",null,"^19",["^10",[null,null,null]],"^X",1,"^W",2115,"^Y",2115,"^17",3,"^1<",true,"^[",["^10",[["~$f","~$m"],["~$f","~$m","~$a"],["~$f","~$m","~$a","~$&","^1@"]]],"^14","Element-wise map-indexed over all elements of one or more arrays.\n\n   f must accept as first argument the index vector of the current element,\n   and return a result compatible with the element-type of the array m\n\n   Performs in-place modification of the first array argument."],"~$coerce",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",737,"^X",7,"^Y",737,"^Z",13,"^[",["^10",["^11",["^10",[["~$param"],["~$matrix-or-implementation","^><"]]]]],"^14","Coerces param (which may be any array) into a format preferred by a specific matrix implementation.\n   If the matrix implementation is not specified, uses the current matrix implementation.\n   If param is already in a format deemed usable by the implementation, may return it unchanged.\n\n   coerce should never alter the shape of the array, but may convert element types where necessary\n   (e.g. turning real values into complex values when converting to a complex array type).","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^><"],["^>=","^><"]]],"^[",["^10",[["^><"],["^>=","^><"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/coerce","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",13,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^><"],["^>=","^><"]]],"^[",["^10",[["^><"],["^>=","^><"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^><"],["^>=","^><"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",737,"^Y",737,"^17",2,"^1<",true,"^[",["^10",[["^><"],["^>=","^><"]]],"^14","Coerces param (which may be any array) into a format preferred by a specific matrix implementation.\n   If the matrix implementation is not specified, uses the current matrix implementation.\n   If param is already in a format deemed usable by the implementation, may return it unchanged.\n\n   coerce should never alter the shape of the array, but may convert element types where necessary\n   (e.g. turning real values into complex values when converting to a complex array type)."],"~$order",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",1114,"^X",7,"^Y",1114,"^Z",12,"^[",["^10",["^11",["^10",[["~$m","^3I"],["~$m","^2A","^3I"]]]]],"^14","Reorders slices of an array along a specified dimension. Re-orders along major dimension\n   if no dimension is specified.\n\n   Indicies can be any seqable object containing the indices along the specified dimension to select.\n   An index can be selected multiple times (which created repreated slices), or not at all (which excludes\n   the slice from the result).","^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","^3I"],["~$m","^2A","^3I"]]],"^[",["^10",[["~$m","^3I"],["~$m","^2A","^3I"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/order","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",12,"^15",["^ ","^16",false,"^17",3,"^18",["^10",[["~$m","^3I"],["~$m","^2A","^3I"]]],"^[",["^10",[["~$m","^3I"],["~$m","^2A","^3I"]]],"^19",["^10",[null,null]]],"^18",["^10",[["~$m","^3I"],["~$m","^2A","^3I"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",1114,"^Y",1114,"^17",3,"^1<",true,"^[",["^10",[["~$m","^3I"],["~$m","^2A","^3I"]]],"^14","Reorders slices of an array along a specified dimension. Re-orders along major dimension\n   if no dimension is specified.\n\n   Indicies can be any seqable object containing the indices along the specified dimension to select.\n   An index can be selected multiple times (which created repreated slices), or not at all (which excludes\n   the slice from the result)."],"~$zero-array",["^ ","^T",null,"^U",["^ ","^V","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix.cljc","^W",162,"^X",7,"^Y",162,"^Z",17,"^[",["^10",["^11",["^10",[["^5<"],["^13","^5<"]]]]],"^14","Creates a new zero-filled numerical array with the given shape.","^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5<"],["^13","^5<"]]],"^[",["^10",[["^5<"],["^13","^5<"]]],"^19",["^10",[null,null]]]],"^B","~$clojure.core.matrix/zero-array","^16",false,"^V","resources/public/js/clojure/core/matrix.cljc","^Z",17,"^15",["^ ","^16",false,"^17",2,"^18",["^10",[["^5<"],["^13","^5<"]]],"^[",["^10",[["^5<"],["^13","^5<"]]],"^19",["^10",[null,null]]],"^18",["^10",[["^5<"],["^13","^5<"]]],"^1;",null,"^19",["^10",[null,null]],"^X",1,"^W",162,"^Y",162,"^17",2,"^1<",true,"^[",["^10",[["^5<"],["^13","^5<"]]],"^14","Creates a new zero-filled numerical array with the given shape."]],"~:require-macros",["^ ","^8","^8","^;","^;","^L","^M","^M","^M","^P","^P","^N","^E","^E","^E","^J","^H","^H","^H"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:else","~:all","~:first","~:butlast","~:last","~:rest"]],"~:order",["^>G","^>J","^>I","^>H","^>K","^>F"]],"^14","Main namespace for the core.matrix API.\n\n   Functions in this API may be supported by multiple matrix implementations, allowing code that uses\n   this API to quickly switch between implementations without significant changes (if any)."]