["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$is-long-array?","~$clojure.core.matrix.macros","~$TODO","^6"],"~:excludes",["~#set",["~$update"]],"~:name","~$clojure.core.matrix.utils","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","~$copy-long-array",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","~:line",106,"~:column",7,"~:end-line",106,"~:end-column",22,"~:arglists",["~#list",["~$quote",["^J",[["~$arr"]]]]],"~:doc","Returns a copy of a long array"],"^;","~$clojure.core.matrix.utils/copy-long-array","~:variadic",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",22,"~:method-params",["^J",[["^L"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^F",1,"^E",106,"^G",106,"~:max-fixed-arity",1,"~:fn-var",true,"^I",["^J",["^K",["^J",[["^L"]]]]],"^M","Returns a copy of a long array"],"~$enhance-protocol-kv",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",255,"^F",7,"^G",255,"^H",26,"^I",["^J",["^K",["^J",[[["~$name","~$p"]]]]]],"^M","Transform MapEntry to just map with some additional fields"],"^;","~$clojure.core.matrix.utils/enhance-protocol-kv","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",26,"^P",["^J",[["~$p__30367"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",255,"^G",255,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[[["^V","~$p"]]]]]],"^M","Transform MapEntry to just map with some additional fields"],"~$copy-object-array",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",112,"^F",7,"^G",112,"^H",24,"^I",["^J",["^K",["^J",[["^L"]]]]],"^M","Returns a copy of a long array"],"^;","~$clojure.core.matrix.utils/copy-object-array","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",24,"^P",["^J",[["^L"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",112,"^G",112,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["^L"]]]]],"^M","Returns a copy of a long array"],"~$valid-shape?",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",66,"^F",7,"^G",66,"^H",19,"^I",["^J",["^K",["^J",[["~$shape"]]]]],"^M","returns true if the given object is a valid core.matrix array shape."],"^;","~$clojure.core.matrix.utils/valid-shape?","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",19,"^P",["^J",[["^10"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",66,"^G",66,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["^10"]]]]],"^M","returns true if the given object is a valid core.matrix array shape."],"~$protocol?",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",248,"^F",7,"^G",248,"^H",16,"^I",["^J",["^K",["^J",[["~$p"]]]]],"^M","Returns true if an argument is a protocol'"],"^;","~$clojure.core.matrix.utils/protocol?","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",16,"^P",["^J",[["~$p"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",248,"^G",248,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["~$p"]]]]],"^M","Returns true if an argument is a protocol'"],"~$base-index-seq-for-shape",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",183,"^F",7,"^G",183,"^H",31,"^I",["^J",["^K",["^J",[["~$sh"]]]]],"^M","Returns a sequence of all possible index vectors for a given shape, in row-major order"],"^;","~$clojure.core.matrix.utils/base-index-seq-for-shape","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",31,"^P",["^J",[["^15"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",183,"^G",183,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["^15"]]]]],"^M","Returns a sequence of all possible index vectors for a given shape, in row-major order"],"~$long-array-of",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",135,"^F",7,"^G",135,"^H",20,"^I",["^J",["^K",["^J",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","~$more"]]]]],"^M","Creates a long array with the specified values.","~:top-fn",["^ ","^O",true,"^S",2,"^P",["^J",[[],["~$a"],["~$a","~$b"]]],"^I",["^J",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^18"]]],"^R",["^J",[null,null,null,null]]]],"^;","~$clojure.core.matrix.utils/long-array-of","^O",true,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",20,"^19",["^ ","^O",true,"^S",2,"^P",["^J",[[],["~$a"],["~$a","~$b"]]],"^I",["^J",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^18"]]],"^R",["^J",[null,null,null,null]]],"^P",["^J",[[],["~$a"],["~$a","~$b"]]],"^Q",null,"^R",["^J",[null,null,null,null]],"^F",1,"^E",135,"^G",135,"^S",2,"^T",true,"^I",["^J",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^18"]]],"^M","Creates a long array with the specified values."],"~$copy-double-array",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",100,"^F",7,"^G",100,"^H",24,"^I",["^J",["^K",["^J",[["^L"]]]]],"^M","Returns a copy of a double array"],"^;","~$clojure.core.matrix.utils/copy-double-array","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",24,"^P",["^J",[["^L"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",100,"^G",100,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["^L"]]]]],"^M","Returns a copy of a double array"],"~$same-shape-object?",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",74,"^F",7,"^G",74,"^H",25,"^I",["^J",["^K",["^J",[["~$sa","~$sb"]]]]],"^M","Returns true if two shapes are the same."],"^;","~$clojure.core.matrix.utils/same-shape-object?","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",25,"^P",["^J",[["^1>","^1?"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",74,"^G",74,"^S",2,"^T",true,"^I",["^J",["^K",["^J",[["^1>","^1?"]]]]],"^M","Returns true if two shapes are the same."],"~$xor",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",89,"^F",7,"^G",89,"^H",10,"^I",["^J",["^K",["^J",[[],["~$x"],["~$x","~$y"],["~$x","~$y","~$&","^18"]]]]],"^M","Returns the logical xor of a set of values, considered as booleans","^19",["^ ","^O",true,"^S",2,"^P",["^J",[[],["~$x"],["~$x","~$y"]]],"^I",["^J",[[],["~$x"],["~$x","~$y"],["~$x","~$y","~$&","^18"]]],"^R",["^J",[null,null,null,null]]]],"^;","~$clojure.core.matrix.utils/xor","^O",true,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",10,"^19",["^ ","^O",true,"^S",2,"^P",["^J",[[],["~$x"],["~$x","~$y"]]],"^I",["^J",[[],["~$x"],["~$x","~$y"],["~$x","~$y","~$&","^18"]]],"^R",["^J",[null,null,null,null]]],"^P",["^J",[[],["~$x"],["~$x","~$y"]]],"^Q",null,"^R",["^J",[null,null,null,null]],"^F",1,"^E",89,"^G",89,"^S",2,"^T",true,"^I",["^J",[[],["~$x"],["~$x","~$y"],["~$x","~$y","~$&","^18"]]],"^M","Returns the logical xor of a set of values, considered as booleans"],"~$update-indexed",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",284,"^F",7,"^G",284,"^H",21,"^I",["^J",["^K",["^J",[["~$xs","~$idxs","~$f"]]]]]],"^;","~$clojure.core.matrix.utils/update-indexed","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",21,"^P",["^J",[["^1D","^1E","~$f"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",284,"^G",284,"^S",3,"^T",true,"^I",["^J",["^K",["^J",[["^1D","^1E","~$f"]]]]]],"~$class",["^ ","^;","~$clojure.core.matrix.utils/class","^D","resources/public/js/clojure/core/matrix/utils.cljc","^E",20,"^F",1,"^G",20,"^H",11,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",20,"^F",6,"^G",20,"^H",11]],"~$doseq-indexed",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",31,"^F",11,"^G",31,"^H",24,"~:macro",true,"^I",["^J",["^K",["^J",[[["~$val-sym","~$values","~$index-sym"],"~$&","~$code"]]]]],"^M","loops over a set of values, binding index-sym to the 0-based index of each value","^19",["^ ","^O",true,"^S",3,"^P",[["^J",["~$&form","~$&env",["^1K","^1L","^1M"],"^1N"]]],"^I",["^J",[["^1O","^1P",["^1K","^1L","^1M"],"~$&","^1N"]]],"^R",["^J",[null]]]],"^;","~$clojure.core.matrix.utils/doseq-indexed","^O",true,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",24,"^19",["^ ","^O",true,"^S",3,"^P",[["^J",["^1O","^1P",["^1K","^1L","^1M"],"^1N"]]],"^I",["^J",[["^1O","^1P",["^1K","^1L","^1M"],"~$&","^1N"]]],"^R",["^J",[null]]],"^P",[["^J",["^1O","^1P",["^1K","^1L","^1M"],"^1N"]]],"^Q",null,"^R",["^J",[null]],"^F",1,"^E",31,"^1J",true,"^G",31,"^S",3,"^T",false,"^I",["^J",[["^1O","^1P",["^1K","^1L","^1M"],"~$&","^1N"]]],"^M","loops over a set of values, binding index-sym to the 0-based index of each value"],"~$object-array-of",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",154,"^F",7,"^G",154,"^H",22,"^I",["^J",["^K",["^J",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^18"]]]]],"^M","Creates a long array with the specified values.","^19",["^ ","^O",true,"^S",2,"^P",["^J",[[],["~$a"],["~$a","~$b"]]],"^I",["^J",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^18"]]],"^R",["^J",[null,null,null,null]]]],"^;","~$clojure.core.matrix.utils/object-array-of","^O",true,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",22,"^19",["^ ","^O",true,"^S",2,"^P",["^J",[[],["~$a"],["~$a","~$b"]]],"^I",["^J",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^18"]]],"^R",["^J",[null,null,null,null]]],"^P",["^J",[[],["~$a"],["~$a","~$b"]]],"^Q",null,"^R",["^J",[null,null,null,null]],"^F",1,"^E",154,"^G",154,"^S",2,"^T",true,"^I",["^J",[[],["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^18"]]],"^M","Creates a long array with the specified values."],"~$broadcast-shape",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",210,"^F",7,"^G",210,"^H",22,"^I",["^J",["^K",["^J",[["~$a"],["~$a","~$b"]]]]],"^M","Returns the smallest compatible shape that a set of shapes can all broadcast to.\n   Returns nil if this is not possible (i.e. the shapes are incompatible).\n   Returns an empty list if both shape sequences are empty (i.e. represent scalars)","^19",["^ ","^O",false,"^S",2,"^P",["^J",[["~$a"],["~$a","~$b"]]],"^I",["^J",[["~$a"],["~$a","~$b"]]],"^R",["^J",[null,null]]]],"^;","~$clojure.core.matrix.utils/broadcast-shape","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",22,"^19",["^ ","^O",false,"^S",2,"^P",["^J",[["~$a"],["~$a","~$b"]]],"^I",["^J",[["~$a"],["~$a","~$b"]]],"^R",["^J",[null,null]]],"^P",["^J",[["~$a"],["~$a","~$b"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",210,"^G",210,"^S",2,"^T",true,"^I",["^J",[["~$a"],["~$a","~$b"]]],"^M","Returns the smallest compatible shape that a set of shapes can all broadcast to.\n   Returns nil if this is not possible (i.e. the shapes are incompatible).\n   Returns an empty list if both shape sequences are empty (i.e. represent scalars)"],"~$can-broadcast",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",221,"^F",7,"^G",221,"^H",20,"^I",["^J",["^K",["^J",[["~$from-shape","~$to-shape"]]]]],"^M","Returns truthy if the first shape a can be broadcast to the shape b"],"^;","~$clojure.core.matrix.utils/can-broadcast","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",20,"^P",["^J",[["^1W","^1X"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",221,"^G",221,"^S",2,"^T",true,"^I",["^J",["^K",["^J",[["^1W","^1X"]]]]],"^M","Returns truthy if the first shape a can be broadcast to the shape b"],"~$long-range",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",118,"^F",7,"^G",118,"^H",17,"^I",["^J",["^K",["^J",[["~$end"]]]]],"^M","Returns a range of longs in a long[] array"],"^;","~$clojure.core.matrix.utils/long-range","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",17,"^P",["^J",[["^1["]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",118,"^G",118,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["^1["]]]]],"^M","Returns a range of longs in a long[] array"],"~$broadcast-shape*",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",193,"^F",8,"^G",193,"^H",24,"~:private",true,"^I",["^J",["^K",["^J",[["~$a","~$b"],["~$prefix","~$a","~$b"]]]]],"^M","Returns the smallest shape that both shapes a and b can broadcast to, or nil if the the shapes\n   are not compatible.","^19",["^ ","^O",false,"^S",3,"^P",["^J",[["~$a","~$b"],["^23","~$a","~$b"]]],"^I",["^J",[["~$a","~$b"],["^23","~$a","~$b"]]],"^R",["^J",[null,null]]]],"^22",true,"^;","~$clojure.core.matrix.utils/broadcast-shape*","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",24,"^19",["^ ","^O",false,"^S",3,"^P",["^J",[["~$a","~$b"],["^23","~$a","~$b"]]],"^I",["^J",[["~$a","~$b"],["^23","~$a","~$b"]]],"^R",["^J",[null,null]]],"^P",["^J",[["~$a","~$b"],["^23","~$a","~$b"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",193,"^G",193,"^S",3,"^T",true,"^I",["^J",[["~$a","~$b"],["^23","~$a","~$b"]]],"^M","Returns the smallest shape that both shapes a and b can broadcast to, or nil if the the shapes\n   are not compatible."],"~$error",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",24,"^F",11,"^G",24,"^H",16,"^1J",true,"^I",["^J",["^K",["^J",[["~$&","~$vals"]]]]],"^M","Throws an error with the provided message(s)","^19",["^ ","^O",true,"^S",2,"^P",[["^J",["^1O","^1P","^26"]]],"^I",["^J",[["^1O","^1P","~$&","^26"]]],"^R",["^J",[null]]]],"^;","~$clojure.core.matrix.utils/error","^O",true,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",16,"^19",["^ ","^O",true,"^S",2,"^P",[["^J",["^1O","^1P","^26"]]],"^I",["^J",[["^1O","^1P","~$&","^26"]]],"^R",["^J",[null]]],"^P",[["^J",["^1O","^1P","^26"]]],"^Q",null,"^R",["^J",[null]],"^F",1,"^E",24,"^1J",true,"^G",24,"^S",2,"^T",false,"^I",["^J",[["^1O","^1P","~$&","^26"]]],"^M","Throws an error with the provided message(s)"],"~$find-index",["^ ","^B",null,"^C",["^ ","^D","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/utils.cljc","^E",173,"^F",7,"^G",173,"^H",17,"^I",["^J",["^K",["^J",[["~$v","~$value"]]]]],"^M","Returns the index of a value in a vector, or nil if not present"],"^;","~$clojure.core.matrix.utils/find-index","^O",false,"^D","resources/public/js/clojure/core/matrix/utils.cljc","^H",17,"^P",["^J",[["~$v","^29"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",173,"^G",173,"^S",2,"^T",true,"^I",["^J",["^K",["^J",[["~$v","^29"]]]]],"^M","Returns the index of a value in a vector, or nil if not present"]],"~:require-macros",["^ ","^6","^6"],"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~$vals__30261__auto__","~$cljs.core/str","~:else","~$cljs.core/seq","^;","^D","~$if","~:on-interface","~$cljs.core/let","~$cljs.core/long","~$cljs.core/loop","^E","~:var","~$recur","~$js/Error.","~$cljs.core/next","~$cljs.core/first","~$throw","~$cljs.core/inc"]],"~:order",["^2L","^2I","^2?","^2F","^2>","^2A","^2E","^2B","^2D","^2K","^2H","^2J","^2M","^2@","^2C","^2G","^E","^D","^;"]],"^M","Namespace for core.matrix utilities. Intended mainly for library and tool writers."]