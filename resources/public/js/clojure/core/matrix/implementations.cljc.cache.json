["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$TODO","~$clojure.core.matrix.macros","~$error","^6"],"~:excludes",["~#set",[]],"~:name","~$clojure.core.matrix.implementations","~:imports",null,"~:requires",["^ ","~$mp","~$clojure.core.matrix.protocols","^?","^?","^6","^6"],"~:uses",null,"~:defs",["^ ","~$construct",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","~:line",147,"~:column",7,"~:end-line",147,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^K",[["~$m","~$data"]]]]],"~:doc","Attempts to construct an array according to the type of array m. If not possible,\n   returns another array type."],"^:","~$clojure.core.matrix.implementations/construct","~:variadic",false,"^E","resources/public/js/clojure/core/matrix/implementations.cljc","^I",16,"~:method-params",["^K",[["~$m","^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"^F",147,"^H",147,"~:max-fixed-arity",2,"~:fn-var",true,"^J",["^K",["^L",["^K",[["~$m","^M"]]]]],"^N","Attempts to construct an array according to the type of array m. If not possible,\n   returns another array type."],"~$*matrix-implementation*",["^ ","^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",48,"^G",16,"^H",48,"^I",39,"~:dynamic",true],"^:","~$clojure.core.matrix.implementations/*matrix-implementation*","^E","resources/public/js/clojure/core/matrix/implementations.cljc","^I",39,"^G",1,"^W",true,"^F",48,"^H",48,"~:tag","~$cljs.core/Keyword","^N","A dynamic var specifying the current core.matrix implementation in use.\n\n   May be re-bound to temporarily use a different core.matrix implementation."],"~$get-canonical-object-or-throw",["^ ","^C",null,"^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",142,"^G",7,"^H",142,"^I",36,"^J",["^K",["^L",["^K",[["~$mk"]]]]],"^N","Like get-canonical-object, except it throws an exception if the implementation cannot be found"],"^:","~$clojure.core.matrix.implementations/get-canonical-object-or-throw","^P",false,"^E","resources/public/js/clojure/core/matrix/implementations.cljc","^I",36,"^Q",["^K",[["^10"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",142,"^H",142,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^10"]]]]],"^N","Like get-canonical-object, except it throws an exception if the implementation cannot be found"],"~$load-implementation",["^ ","^C",null,"^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",115,"^G",7,"^H",115,"^I",26,"^J",["^K",["^L",["^K",[["~$korm"]]]]],"^N","Attempts to load the implementation for a given keyword or matrix object.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."],"^:","~$clojure.core.matrix.implementations/load-implementation","^P",false,"^E","resources/public/js/clojure/core/matrix/implementations.cljc","^I",26,"^Q",["^K",[["^13"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",115,"^H",115,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^13"]]]]],"^N","Attempts to load the implementation for a given keyword or matrix object.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."],"~$KNOWN-IMPLEMENTATIONS",["^ ","^:","~$clojure.core.matrix.implementations/KNOWN-IMPLEMENTATIONS","^E","resources/public/js/clojure/core/matrix/implementations.cljc","^F",12,"^G",1,"^H",12,"^I",27,"^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",12,"^G",6,"^H",12,"^I",27],"^N","A map of known core.matrix implementation namespaces.\n\n   core.matrix will attempt to load these namespaces when an array of the specified\n   keyword type is requested.","^Y","~$cljs.core/PersistentArrayMap"],"~$*debug-options*",["^ ","^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",61,"^G",3,"^H",61,"^I",18,"^N","A dynamic var supporting debugging option for core.matrix implementers.\n\n   Currently supported values:\n     :print-registrations  - print when core.matrix implementations are registered\n     :reload-namespaces  - require :reload implementation namespaces when setting the current implementation","^W",true],"^:","~$clojure.core.matrix.implementations/*debug-options*","^E","resources/public/js/clojure/core/matrix/implementations.cljc","^I",18,"^G",1,"^W",true,"^F",54,"^H",61,"^Y","~$cljs.core/IMap","^N","A dynamic var supporting debugging option for core.matrix implementers.\n\n   Currently supported values:\n     :print-registrations  - print when core.matrix implementations are registered\n     :reload-namespaces  - require :reload implementation namespaces when setting the current implementation"],"~$set-current-implementation",["^ ","^C",null,"^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",157,"^G",7,"^H",157,"^I",33,"^J",["^K",["^L",["^K",[["~$m"]]]]],"^N","Sets the currently active core.matrix implementation.\n\n   Parameter may be\n    - A known keyword for the implementation e.g. :vectorz\n    - An existing instance from the implementation\n\n   This is used primarily for functions that construct new matrices, i.e. it determines the\n   implementation used for expressions like: (matrix [[1 2] [3 4]])"],"^:","~$clojure.core.matrix.implementations/set-current-implementation","^P",false,"^E","resources/public/js/clojure/core/matrix/implementations.cljc","^I",33,"^Q",["^K",[["~$m"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",157,"^H",157,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["~$m"]]]]],"^N","Sets the currently active core.matrix implementation.\n\n   Parameter may be\n    - A known keyword for the implementation e.g. :vectorz\n    - An existing instance from the implementation\n\n   This is used primarily for functions that construct new matrices, i.e. it determines the\n   implementation used for expressions like: (matrix [[1 2] [3 4]])"],"~$register-implementation",["^ ","^C",null,"^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",80,"^G",7,"^H",80,"^I",30,"^J",["^K",["^L",["^K",[["~$canonical-object"],["~$key","^1>"]]]]],"^N","Registers a matrix implementation for use. Should be called by all implementations\n   when they are loaded, once for each implementation keyword registered. Safe to call multiple times.","~:top-fn",["^ ","^P",false,"^T",2,"^Q",["^K",[["^1>"],["^1?","^1>"]]],"^J",["^K",[["^1>"],["^1?","^1>"]]],"^S",["^K",[null,null]]]],"^:","~$clojure.core.matrix.implementations/register-implementation","^P",false,"^E","resources/public/js/clojure/core/matrix/implementations.cljc","^I",30,"^1@",["^ ","^P",false,"^T",2,"^Q",["^K",[["^1>"],["^1?","^1>"]]],"^J",["^K",[["^1>"],["^1?","^1>"]]],"^S",["^K",[null,null]]],"^Q",["^K",[["^1>"],["^1?","^1>"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",80,"^H",80,"^T",2,"^U",true,"^J",["^K",[["^1>"],["^1?","^1>"]]],"^N","Registers a matrix implementation for use. Should be called by all implementations\n   when they are loaded, once for each implementation keyword registered. Safe to call multiple times."],"~$try-load-implementation",["^ ","^C",null,"^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",95,"^G",8,"^H",95,"^I",31,"~:private",true,"^J",["^K",["^L",["^K",[["~$k"]]]]],"^N","Attempts to load an implementation for the given keyword.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."],"^1C",true,"^:","~$clojure.core.matrix.implementations/try-load-implementation","^P",false,"^E","resources/public/js/clojure/core/matrix/implementations.cljc","^I",31,"^Q",["^K",[["~$k"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",95,"^H",95,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["~$k"]]]]],"^N","Attempts to load an implementation for the given keyword.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."],"~$canonical-objects",["^ ","^:","~$clojure.core.matrix.implementations/canonical-objects","^E","resources/public/js/clojure/core/matrix/implementations.cljc","^F",64,"^G",1,"^H",70,"^I",20,"^N","An atom holding a map of canonical objects for each loaded core.matrix implementation.\n\n   Canonical objects may be used to invoke protocol methods on an instance of the correct\n   type to get implementation-specific behaviour. Canonical objects are required to support\n   all mandatory core.matrix protocols.","^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",70,"^G",3,"^H",70,"^I",20,"^N","An atom holding a map of canonical objects for each loaded core.matrix implementation.\n\n   Canonical objects may be used to invoke protocol methods on an instance of the correct\n   type to get implementation-specific behaviour. Canonical objects are required to support\n   all mandatory core.matrix protocols."],"^Y","~$any"],"~$DEFAULT-IMPLEMENTATION",["^ ","^:","~$clojure.core.matrix.implementations/DEFAULT-IMPLEMENTATION","^E","resources/public/js/clojure/core/matrix/implementations.cljc","^F",42,"^G",1,"^H",42,"^I",28,"^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",42,"^G",6,"^H",42,"^I",28],"^N","The default implementation used in core.matrix. Currently set to `:persistent-vector` for maximum\n   compatibility with regular Clojure code.","^Y","^Z"],"~$get-implementation-key",["^ ","^C",null,"^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",72,"^G",7,"^H",72,"^I",29,"^J",["^K",["^L",["^K",[["~$m"]]]]],"^N","Returns the implementation keyword  for a given object"],"^:","~$clojure.core.matrix.implementations/get-implementation-key","^P",false,"^E","resources/public/js/clojure/core/matrix/implementations.cljc","^I",29,"^Q",["^K",[["~$m"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",72,"^H",72,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["~$m"]]]]],"^N","Returns the implementation keyword  for a given object"],"~$get-canonical-object",["^ ","^C",null,"^D",["^ ","^E","/home/pedro/GitHub/unicycle/resources/public/js/clojure/core/matrix/implementations.cljc","^F",123,"^G",7,"^H",123,"^I",27,"^J",["^K",["^L",["^K",[[],["~$m"]]]]],"^N","Gets the canonical object for a specific implementation. The canonical object is used\n   to call implementation-specific protocol functions where required (e.g. creation of new\n   arrays of the correct type for the implementation).\n\n   Returns nil if the implementation cannot be found.","^1@",["^ ","^P",false,"^T",1,"^Q",["^K",[[],["~$m"]]],"^J",["^K",[[],["~$m"]]],"^S",["^K",[null,null]]]],"^:","~$clojure.core.matrix.implementations/get-canonical-object","^P",false,"^E","resources/public/js/clojure/core/matrix/implementations.cljc","^I",27,"^1@",["^ ","^P",false,"^T",1,"^Q",["^K",[[],["~$m"]]],"^J",["^K",[[],["~$m"]]],"^S",["^K",[null,null]]],"^Q",["^K",[[],["~$m"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",123,"^H",123,"^T",1,"^U",true,"^J",["^K",[[],["~$m"]]],"^N","Gets the canonical object for a specific implementation. The canonical object is used\n   to call implementation-specific protocol functions where required (e.g. creation of new\n   arrays of the correct type for the implementation).\n\n   Returns nil if the implementation cannot be found."]],"~:require-macros",["^ ","^6","^6"],"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~$clojure.core.matrix.impl.ndarray-double","~:ndarray-long","~$nd4clj.kiw","~:ejml","~$clojure.core.matrix.impl.wrappers","~:persistent-map","~:else","~$cav.mtj.core.matrix","~:clojure","~:double-array","~$clatrix.core","~:persistent-vector","~:nd4j","~$thinktopic.aljabr.core","~$mikera.vectorz.matrix-api","~:print-registrations","~:commons-math","~$clojure.core.matrix.impl.sequence","~:jblas","~:mtj","~$clojure.core.matrix.impl.ndarray","~$clojure.core.matrix.impl.dataset","~:clatrix","~:scalar-wrapper","~$clojure.core.matrix.impl.sparse-map","~:sequence","~:ndarray-float","~:reload-namespaces","~:TODO","~:ujmp","~:nd-wrapper","~:ndarray","~:parallel-colt","~$clojure.core.matrix.impl.ndarray-object","~:ndarray-double","~:aljabr","~$clojure.core.matrix.impl.double-array","~$clojure.core.matrix.impl.persistent-vector","~$clojure.core.matrix.impl.clojure","~:dataset","~:vectorz","~$apache-commons-matrix.core","~:slice-wrapper"]],"~:order",["^2M","^1Y","^2D","^2G","^2?","^1R","^20","^1V","^2>","^1Z","^2<","^2O","^2C","^2L","^27","^2;","^2E","^1T","^21","^2B","^25","^28","^2H","^23","^2K","^2F","^1Q","^29","^2J","^2=","^26","^2I","^1U","^2:","^2A","^1[","^1S","^2N","^1X","^22","^24","^2@","^1W"]],"^N","Namespace for management of core.matrix implementations. Users should avoid using these\n   functions directly as they are intended for library and tool writers."]