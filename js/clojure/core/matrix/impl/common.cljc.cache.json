["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$scalar-coerce","~$clojure.core.matrix.macros"],"~:excludes",["~#set",[]],"~:name","~$clojure.core.matrix.impl.common","~:imports",null,"~:requires",["^ ","~$s","~$clojure.string","^=","^=","~$mp","~$clojure.core.matrix.protocols","^?","^?","~$u","~$clojure.core.matrix.utils","^@","^@","~$mi","~$clojure.core.matrix.implementations","^B","^B"],"~:uses",null,"~:defs",["^ ","~$get-impl-objs",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/impl/common.cljc","~:line",11,"~:column",7,"~:end-line",11,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^N",[[]]]]],"~:doc","Returns a list of available implementations' objects"],"^9","~$clojure.core.matrix.impl.common/get-impl-objs","~:variadic",false,"^H","resources/public/js/clojure/core/matrix/impl/common.cljc","^L",20,"~:method-params",["^N",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^N",[null,null]],"^J",1,"^I",11,"^K",11,"~:max-fixed-arity",0,"~:fn-var",true,"^M",["^N",["^O",["^N",[[]]]]],"^P","Returns a list of available implementations' objects"],"~$construct-matrix",["^ ","^F",null,"^G",["^ ","^H","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/impl/common.cljc","^I",48,"^J",7,"^K",48,"^L",23,"^M",["^N",["^O",["^N",[["~$impl","~$data"]]]]],"^P","Constructs an array from the provided data, attempying to use the given implementation.\n   Uses a default implementation if needed"],"^9","~$clojure.core.matrix.impl.common/construct-matrix","^R",false,"^H","resources/public/js/clojure/core/matrix/impl/common.cljc","^L",23,"^S",["^N",[["^Y","^Z"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^I",48,"^K",48,"^V",2,"^W",true,"^M",["^N",["^O",["^N",[["^Y","^Z"]]]]],"^P","Constructs an array from the provided data, attempying to use the given implementation.\n   Uses a default implementation if needed"],"~$mapmatrix",["^ ","^F",null,"^G",["^ ","^H","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/impl/common.cljc","^I",56,"^J",7,"^K",56,"^L",16,"^M",["^N",["^O",["^N",[["~$f","~$m"],["~$f","~$m1","~$m2"],["~$f","^11","^12","~$m3"],["~$f","^11","^12","^13","~$&","~$more"]]]]],"^P","Maps a function over all components of a persistent vector matrix. Like mapv but for matrices.\n   Assumes correct dimensionality / shape.\n\n   First array argument must be nested persistent vectors. Others may be\n   any arrays of the same shape.\n\n   Returns a nested persistent vector matrix or a scalar value.","~:top-fn",["^ ","^R",true,"^V",4,"^S",["^N",[["~$f","~$m"],["~$f","^11","^12"],["~$f","^11","^12","^13"]]],"^M",["^N",[["~$f","~$m"],["~$f","^11","^12"],["~$f","^11","^12","^13"],["~$f","^11","^12","^13","~$&","^14"]]],"^U",["^N",[null,null,null,null]]]],"^9","~$clojure.core.matrix.impl.common/mapmatrix","^R",true,"^H","resources/public/js/clojure/core/matrix/impl/common.cljc","^L",16,"^15",["^ ","^R",true,"^V",4,"^S",["^N",[["~$f","~$m"],["~$f","^11","^12"],["~$f","^11","^12","^13"]]],"^M",["^N",[["~$f","~$m"],["~$f","^11","^12"],["~$f","^11","^12","^13"],["~$f","^11","^12","^13","~$&","^14"]]],"^U",["^N",[null,null,null,null]]],"^S",["^N",[["~$f","~$m"],["~$f","^11","^12"],["~$f","^11","^12","^13"]]],"^T",null,"^U",["^N",[null,null,null,null]],"^J",1,"^I",56,"^K",56,"^V",4,"^W",true,"^M",["^N",[["~$f","~$m"],["~$f","^11","^12"],["~$f","^11","^12","^13"],["~$f","^11","^12","^13","~$&","^14"]]],"^P","Maps a function over all components of a persistent vector matrix. Like mapv but for matrices.\n   Assumes correct dimensionality / shape.\n\n   First array argument must be nested persistent vectors. Others may be\n   any arrays of the same shape.\n\n   Returns a nested persistent vector matrix or a scalar value."],"~$logistic-fn",["^ ","^F",null,"^G",["^ ","^H","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/impl/common.cljc","^I",114,"^J",7,"^K",114,"^L",18,"^M",["^N",["^O",["^N",[["~$t"]]]]],"^P","Logistic function, with primitive type hints"],"^9","~$clojure.core.matrix.impl.common/logistic-fn","^R",false,"^H","resources/public/js/clojure/core/matrix/impl/common.cljc","^L",18,"^S",["^N",[["~$t"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^I",114,"^K",114,"^V",1,"^W",true,"^M",["^N",["^O",["^N",[["~$t"]]]]],"^P","Logistic function, with primitive type hints"],"~$softplus-fn",["^ ","^F",null,"^G",["^ ","^H","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/impl/common.cljc","^I",120,"^J",7,"^K",120,"^L",18,"^M",["^N",["^O",["^N",[["~$t"]]]]],"^P","Softplus function, with primitive type hints"],"^9","~$clojure.core.matrix.impl.common/softplus-fn","^R",false,"^H","resources/public/js/clojure/core/matrix/impl/common.cljc","^L",18,"^S",["^N",[["~$t"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^I",120,"^K",120,"^V",1,"^W",true,"^M",["^N",["^O",["^N",[["~$t"]]]]],"^P","Softplus function, with primitive type hints"],"~$relu-fn",["^ ","^F",null,"^G",["^ ","^H","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/impl/common.cljc","^I",128,"^J",7,"^K",128,"^L",14,"^M",["^N",["^O",["^N",[["~$t"]]]]],"^P","ReLU function, with primitive type hints"],"^9","~$clojure.core.matrix.impl.common/relu-fn","^R",false,"^H","resources/public/js/clojure/core/matrix/impl/common.cljc","^L",14,"^S",["^N",[["~$t"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^I",128,"^K",128,"^V",1,"^W",true,"^M",["^N",["^O",["^N",[["~$t"]]]]],"^P","ReLU function, with primitive type hints"],"~$square?",["^ ","^F",null,"^G",["^ ","^H","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/impl/common.cljc","^I",133,"^J",7,"^K",133,"^L",14,"^M",["^N",["^O",["^N",[["~$m"]]]]],"^P","Returns true if matrix is square (2D with same number of rows and columns)"],"^9","~$clojure.core.matrix.impl.common/square?","^R",false,"^H","resources/public/js/clojure/core/matrix/impl/common.cljc","^L",14,"^S",["^N",[["~$m"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^I",133,"^K",133,"^V",1,"^W",true,"^M",["^N",["^O",["^N",[["~$m"]]]]],"^P","Returns true if matrix is square (2D with same number of rows and columns)"],"~$symmetric-matrix-entries?",["^ ","^F",null,"^G",["^ ","^H","/home/pedro/github/unicycle/resources/public/js/clojure/core/matrix/impl/common.cljc","^I",143,"^J",7,"^K",143,"^L",32,"^M",["^N",["^O",["^N",[["~$m"]]]]],"^P","Returns true iff square matrix m is symmetric."],"^9","~$clojure.core.matrix.impl.common/symmetric-matrix-entries?","^R",false,"^H","resources/public/js/clojure/core/matrix/impl/common.cljc","^L",32,"^S",["^N",[["~$m"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^I",143,"^K",143,"^V",1,"^W",true,"^M",["^N",["^O",["^N",[["~$m"]]]]],"^P","Returns true iff square matrix m is symmetric."]],"~:require-macros",["^ ","^6","^6"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:else","^9","~:persistent-vector","~:TODO","~:obj"]],"~:order",["^1E","^1F","^1D","^9","^1G"]],"^P","Namespace containing common functions useful for core.matrix implementatations"]